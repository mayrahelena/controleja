"""
# =============================================================================
    SISTEMA DE PONTO - MERCEARIA
    Vers√£o: 2.0 Corrigida
    Data: Outubro 2025

    Sistema de controle de ponto para funcion√°ris com:
    - Registro via site (valida√ß√£o Wi-Fi)
    - Registro via WhatsApp (CallMeBot)
    - Relat√≥rios autom√°ticos
    - Backup mensal via Telegram
# =============================================================================
"""

# =============================================================================
# IMPORTS
# =============================================================================

import pymysql
from pymysql.cursors import DictCursor
from flask import Flask, render_template, request, redirect, url_for, session, flash, g
from werkzeug.security import generate_password_hash, check_password_hash
import bcrypt
from functools import wraps
from datetime import datetime, date, timedelta, time
import pytz
from dateutil.relativedelta import relativedelta
import requests
from urllib.parse import quote
import os
import logging
from logging.handlers import RotatingFileHandler
import json

# üîê SEGURAN√áA: Carregar vari√°veis de ambiente
from dotenv import load_dotenv
load_dotenv()  # Carrega o arquivo .env

# =============================================================================
# TIMEZONE
# =============================================================================

TIMEZONE = pytz.timezone('America/Sao_Paulo')

def agora_sp():
    return datetime.now(TIMEZONE)

def hoje_sp():
    return agora_sp().date()

# =============================================================================
# LOGGING
# =============================================================================

if not os.path.exists('logs'):
    os.makedirs('logs')

whatsapp_logger = logging.getLogger('whatsapp_falhas')
whatsapp_logger.setLevel(logging.ERROR)
handler = RotatingFileHandler('logs/whatsapp_falhas.log', maxBytes=1000000, backupCount=3)
handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
whatsapp_logger.addHandler(handler)

falhas_whatsapp_hoje = []

# =============================================================================
# üîê FLASK - COM SEGURAN√áA
# =============================================================================

app = Flask(__name__)

# ‚úÖ Secret key do arquivo .env
app.secret_key = os.getenv('SECRET_KEY', 'fallback_chave_temporaria_MUDE_ISSO')

if app.secret_key == 'fallback_chave_temporaria_MUDE_ISSO':
    print("‚ö†Ô∏è AVISO: SECRET_KEY n√£o configurada no .env!")

# =============================================================================
# üîê MYSQL - COM SEGURAN√áA
# =============================================================================

MYSQL_HOST = os.getenv('MYSQL_HOST', 'localhost')
MYSQL_USER = os.getenv('MYSQL_USER', 'root')
MYSQL_PASSWORD = os.getenv('MYSQL_PASSWORD')
MYSQL_DB = os.getenv('MYSQL_DB', 'ponto_db')

if not MYSQL_PASSWORD:
    raise Exception("‚ùå ERRO: MYSQL_PASSWORD n√£o configurada no .env!")

print("‚úÖ Parte 1 carregada: Imports e Configura√ß√µes Flask (SEGURA)")

# =============================================================================
# üîê WHATSAPP - COM SEGURAN√áA
# =============================================================================

# ‚úÖ Chaves do arquivo .env
CALLMEBOT_KEYS = {
    '+553175124667': os.getenv('CALLMEBOT_ADMIN'),
    '+553191932116': os.getenv('CALLMEBOT_MAISA'),
    '+553188179900': os.getenv('CALLMEBOT_IRLAINE'),
    '+553191909665': os.getenv('CALLMEBOT_TESTE'),
    '+553193731622': os.getenv('CALLMEBOT_TESTE1')
}

# Verificar se est√£o configuradas
for telefone, chave in CALLMEBOT_KEYS.items():
    if not chave:
        print(f"‚ö†Ô∏è AVISO: Chave CallMeBot n√£o configurada para {telefone}")

URL_SITE = os.getenv('URL_SITE', 'seu-site.com')


# Hor√°rios (mantidos no c√≥digo - n√£o s√£o sens√≠veis)
HORARIOS_FUNCIONARIAS = {
    'Ma√≠sa': {
        'seg': {'entrada': '08:00', 'saida': '18:00'},
        'ter': {'entrada': '08:00', 'saida': '18:00'},
        'qua': {'entrada': '08:00', 'saida': '18:00'},
        'qui': {'entrada': '08:00', 'saida': '18:00'},
        'sex': {'entrada': '08:00', 'saida': '18:00'},
        'sab': {'entrada': '08:00', 'saida': '14:00'},
        'dom': None
    },
    'Teste': {
        'seg': {'entrada': '08:00', 'saida': '18:00'},
        'ter': {'entrada': '08:00', 'saida': '18:00'},
        'qua': {'entrada': '08:00', 'saida': '18:00'},
        'qui': {'entrada': '08:00', 'saida': '18:00'},
        'sex': {'entrada': '08:00', 'saida': '18:00'},
        'sab': {'entrada': '08:00', 'saida': '14:00'},
        'dom': None
    }
}

# =============================================================================
# üîê TELEGRAM - COM SEGURAN√áA
# =============================================================================

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

BACKUP_ATIVADO = bool(TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID)

if not BACKUP_ATIVADO:
    print("‚ö†Ô∏è AVISO: Telegram n√£o configurado (backup desativado)")

print("‚úÖ Parte 2 carregada: Configura√ß√µes WhatsApp e Telegram (SEGURA)")

# =============================================================================
# FUN√á√ïES BANCO DE DADOS - MySQL
# =============================================================================

def get_db():
    """
    Obt√©m conex√£o com banco de dados MySQL.
    Usa Flask 'g' para reutilizar conex√£o durante request.
    
    Returns:
        Connection: Conex√£o PyMySQL com DictCursor
    """
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = pymysql.connect(
            host=MYSQL_HOST,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DB,
            cursorclass=DictCursor,
            autocommit=False,
            charset='utf8mb4'
        )
    return db

@app.teardown_appcontext
def close_connection(exception):
    """
    Fecha conex√£o com banco ao final de cada request.
    Executado automaticamente pelo Flask.
    """
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()

def query_db(query, args=(), one=False):
    """
    Executa query SELECT no banco.
    
    Args:
        query (str): SQL query com placeholders %s
        args (tuple): Valores para substituir placeholders
        one (bool): Se True, retorna apenas 1 resultado
    
    Returns:
        dict/list: Dicion√°rio (se one=True) ou lista de dicion√°rios
    
    Exemplo:
        user = query_db('SELECT * FROM users WHERE id = %s', (user_id,), one=True)
        users = query_db('SELECT * FROM users WHERE tipo = %s', ('funcionaria',))
    """
    db = get_db()
    with db.cursor() as cur:
        cur.execute(query, args)
        rv = cur.fetchall()
    return (rv[0] if rv else None) if one else rv

def execute_db(query, args=()):
    """
    Executa query INSERT/UPDATE/DELETE no banco.
    Faz commit autom√°tico.
    
    Args:
        query (str): SQL query com placeholders %s
        args (tuple): Valores para substituir placeholders
    
    Returns:
        int: ID do √∫ltimo registro inserido (para INSERT)
    
    Exemplo:
        record_id = execute_db(
            'INSERT INTO records (user_id, data, hora_entrada) VALUES (%s, %s, %s)',
            (user_id, hoje, '08:00:00')
        )
    """
    db = get_db()
    with db.cursor() as cur:
        cur.execute(query, args)
        db.commit()
        return cur.lastrowid

# =============================================================================
# ‚úÖ CORRE√á√ÉO 4: Try/except para schema.sql + ‚úÖ CORRE√á√ÉO 10: √çndices
# =============================================================================

def init_db():
    """
    Inicializa banco de dados COM PROTE√á√ÉO DE DADOS:
    1. Cria database se n√£o existir (nunca apaga)
    2. Executa schema.sql APENAS se tabelas n√£o existirem
    3. Cria √≠ndices para otimiza√ß√£o
    4. Cria usu√°rio admin padr√£o se n√£o existir
    
    ‚ö†Ô∏è PROTE√á√ÉO: Nunca apaga dados existentes!
    """
    # Criar database (nunca apaga, s√≥ cria se n√£o existir)
    conn = pymysql.connect(
        host=MYSQL_HOST,
        user=MYSQL_USER,
        password=MYSQL_PASSWORD,
        cursorclass=DictCursor,
        autocommit=True,
        charset='utf8mb4'
    )
    with conn.cursor() as cur:
        cur.execute(
            f"CREATE DATABASE IF NOT EXISTS {MYSQL_DB} "
            f"CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
        )
    conn.close()
    
    # Conectar ao database criado
    db = get_db()
    with db.cursor() as cur:
        # üõ°Ô∏è PROTE√á√ÉO: Verificar se tabelas j√° existem
        cur.execute("""
            SELECT COUNT(*) as total 
            FROM information_schema.tables 
            WHERE table_schema = %s 
            AND table_name = 'users'
        """, (MYSQL_DB,))
        
        resultado = cur.fetchone()
        tabelas_existem = resultado['total'] > 0
        
        if tabelas_existem:
            print("‚úÖ BANCO DE DADOS J√Å EXISTE - Dados preservados!")
            print(f"   Database: {MYSQL_DB}")
            
            # Contar registros existentes
            try:
                cur.execute("SELECT COUNT(*) as total FROM users")
                users = cur.fetchone()
                cur.execute("SELECT COUNT(*) as total FROM records")
                records = cur.fetchone()
                print(f"   üë• Usu√°rios: {users['total']}")
                print(f"   üìä Registros de ponto: {records['total']}")
            except:
                pass
        else:
            print("üì¶ PRIMEIRA EXECU√á√ÉO - Criando tabelas...")
            # Tentar executar schema.sql
            try:
                with open('schema.sql', 'r', encoding='utf-8') as f:
                    schema_sql = f.read()
                
                # Executar cada statement separadamente
                for statement in schema_sql.split(';'):
                    stmt = statement.strip()
                    if stmt:
                        cur.execute(stmt)
                db.commit()
                print("‚úÖ Tabelas criadas com sucesso!")
            
            except FileNotFoundError:
                print("‚ö†Ô∏è AVISO: schema.sql n√£o encontrado!")
                print("   O sistema pode n√£o funcionar corretamente.")
                print("   Verifique se o arquivo schema.sql existe na raiz do projeto.")
            
            except Exception as e:
                print(f"‚ùå ERRO CR√çTICO ao executar schema.sql: {e}")
                print("   O sistema N√ÉO poder√° funcionar corretamente!")
                raise
        
        # Criar √≠ndices (sempre verifica, nunca quebra se j√° existir)
        print("üîç Verificando √≠ndices...")
        indices_config = [
            ("idx_records_user_data", "records", "user_id, data"),
            ("idx_records_data", "records", "data"),
            ("idx_users_telefone", "users", "telefone"),
            ("idx_solicitacoes_status", "solicitacoes_correcao", "status")
        ]
        
        for nome_indice, tabela, colunas in indices_config:
            try:
                cur.execute("""
                    SELECT COUNT(*) as existe
                    FROM information_schema.statistics 
                    WHERE table_schema = DATABASE()
                    AND table_name = %s
                    AND index_name = %s
                """, (tabela, nome_indice))
                
                resultado = cur.fetchone()
                
                if resultado['existe'] == 0:
                    query = f"CREATE INDEX {nome_indice} ON {tabela} ({colunas})"
                    cur.execute(query)
                    print(f"   ‚úÖ √çndice {nome_indice} criado")
                else:
                    print(f"   ‚ÑπÔ∏è √çndice {nome_indice} OK")
            
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erro no √≠ndice {nome_indice}: {e}")
        
        db.commit()
        print("‚úÖ √çndices verificados!")
        
        # Criar usu√°rio admin APENAS se n√£o existir
        cur.execute("SELECT * FROM users WHERE tipo = 'admin' LIMIT 1")
        admin = cur.fetchone()
        
        if not admin:
            senha_admin = bcrypt.hashpw('admin123'.encode(), bcrypt.gensalt())
            cur.execute(
                "INSERT INTO users (nome, username, senha, tipo) VALUES (%s, %s, %s, 'admin')",
                ('Administrador', 'admin', senha_admin)
            )
            db.commit()
            print("‚úÖ Usu√°rio admin criado!")
            print("   Login: admin")
            print("   Senha: admin123")
            print("   ‚ö†Ô∏è TROQUE A SENHA ap√≥s primeiro login!")
        else:
            print("‚úÖ Usu√°rio admin j√° existe")

# =============================================================================
# DECORADORES DE AUTENTICA√á√ÉO
# =============================================================================

def login_required(f):
    """
    Decorator: Garante que usu√°rio est√° logado.
    Redireciona para login se n√£o estiver.
    
    Uso:
        @app.route('/dashboard')
        @login_required
        def dashboard():
            ...
    """
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

def admin_required(f):
    """
    Decorator: Garante que usu√°rio √© admin.
    Redireciona para login se n√£o for.
    
    Uso:
        @app.route('/admin/relatorios')
        @admin_required
        def relatorios():
            ...
    """
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session or session.get('tipo') != 'admin':
            flash('Acesso negado.')
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

# =============================================================================
# ‚úÖ CORRE√á√ÉO 3: LIMPEZA DE DADOS ANTIGOS (13 MESES)
# =============================================================================

def cleanup_old_records():
    """
    Remove registros com mais de 13 meses (395 dias).
    
    Por qu√™ 13 meses?
    - C√°lculo de 13¬∫ precisa de dados do ano inteiro
    - 13 meses garante que sempre ter√° 12 meses completos
    - Exemplo: Em janeiro/2026, ainda ter√° dados de dezembro/2024
    
    Executado automaticamente antes de:
    - Listar registros no admin
    - Exibir tela da funcion√°ria
    
    IMPORTANTE: Backup autom√°tico √© feito ANTES da limpeza!
    """
    cutoff = hoje_sp() - timedelta(days=395)  # 13 meses
    execute_db("DELETE FROM records WHERE data < %s", (cutoff.isoformat(),))

# =============================================================================
# ‚úÖ CORRE√á√ÉO 9: FUN√á√ÉO √öNICA DE FORMATA√á√ÉO (remove duplica√ß√£o)
# =============================================================================

def format_hora(h):
    """
    Formata hora para exibi√ß√£o (HH:MM).
    Fun√ß√£o centralizada - N√ÉO crie vers√µes locais!
    
    Args:
        h: Pode ser None, datetime, time, timedelta ou string
    
    Returns:
        str: Hora formatada como 'HH:MM' ou '-' se None
    
    Exemplos:
        format_hora(None) ‚Üí '-'
        format_hora(datetime(2025,10,4,8,30)) ‚Üí '08:30'
        format_hora(timedelta(hours=8, minutes=30)) ‚Üí '08:30'
        format_hora('08:30:00') ‚Üí '08:30'
    """
    if h is None:
        return '-'
    
    # Se √© timedelta (retorno do MySQL para TIME)
    if isinstance(h, timedelta):
        total_seg = int(h.total_seconds())
        horas = total_seg // 3600
        minutos = (total_seg % 3600) // 60
        return f"{horas:02d}:{minutos:02d}"
    
    # Se √© datetime ou time
    if isinstance(h, (datetime, time)):
        return h.strftime('%H:%M')
    
    # Se √© string, tentar converter
    try:
        dt = datetime.strptime(str(h), '%H:%M:%S')
        return dt.strftime('%H:%M')
    except:
        return str(h)

# =============================================================================
# C√ÅLCULO DE VALOR POR HORA E DIA
# =============================================================================

def calcular_valor_hora(data_trabalho, funcionaria_nome=None):
    """
    Calcula valor por hora baseado no dia da semana.
    Valores v√™m do banco de dados (configur√°veis pelo admin).
    
    Args:
        data_trabalho (date): Data do trabalho
        funcionaria_nome (str): Nome da funcion√°ria (para regras futuras)
    
    Returns:
        float: Valor por hora
    """
    dias_semana = ['segunda', 'terca', 'quarta', 'quinta', 'sexta', 'sabado', 'domingo']
    tipo_dia = dias_semana[data_trabalho.weekday()]
    
    # Buscar valor configurado no banco
    config = query_db(
        "SELECT valor_hora FROM configuracoes_pagamento WHERE tipo_dia = %s AND ativo = 1",
        (tipo_dia,),
        one=True
    )
    
    # Se encontrou no banco, usa o valor configurado
    if config:
        return float(config['valor_hora'])
    
    # Fallback: Se n√£o tem no banco, usa valores antigos (retrocompatibilidade)
    print(f"‚ö†Ô∏è AVISO: Valor n√£o encontrado no banco para {tipo_dia}. Usando fallback.")
    return 10.0 if data_trabalho.weekday() == 6 else 6.9

def calcular_valor_dia(data_trabalho, hora_entrada, hora_saida, funcionaria_nome=None):
    """
    Calcula total de horas trabalhadas e valor do dia.
    
    Args:
        data_trabalho (date): Data do trabalho
        hora_entrada (time): Hora de entrada
        hora_saida (time): Hora de sa√≠da
        funcionaria_nome (str): Nome da funcion√°ria
    
    Returns:
        tuple: (horas_trabalhadas timedelta, valor float)
    
    Exemplo:
        horas, valor = calcular_valor_dia(date(2025,10,4), time(8,0), time(18,0))
        # horas = timedelta(hours=10)
        # valor = 69.0 (10 horas √ó R$ 6,90)
    """
    if not hora_entrada or not hora_saida:
        return None, 0
    
    # Calcular diferen√ßa
    dt_entrada = datetime.combine(date.today(), hora_entrada)
    dt_saida = datetime.combine(date.today(), hora_saida)
    horas_trabalhadas = dt_saida - dt_entrada
    
    # Converter para decimal
    horas_dec = horas_trabalhadas.total_seconds() / 3600
    
    # Calcular valor
    valor_hora = calcular_valor_hora(data_trabalho, funcionaria_nome)
    valor = round(horas_dec * valor_hora, 2)
    
    return horas_trabalhadas, valor

def funcionaria_trabalha_hoje(nome, dia_semana):
    """
    Verifica se funcion√°ria trabalha em determinado dia.
    
    Args:
        nome (str): Nome da funcion√°ria
        dia_semana (str): 'seg', 'ter', 'qua', 'qui', 'sex', 'sab', 'dom'
    
    Returns:
        dict ou None: {'entrada': 'HH:MM', 'saida': 'HH:MM'} ou None
    
    Exemplo:
        horario = funcionaria_trabalha_hoje('Ma√≠sa', 'seg')
        # horario = {'entrada': '08:00', 'saida': '18:00'}
    """
    horarios = HORARIOS_FUNCIONARIAS.get(nome)
    if not horarios:
        return None
    return horarios.get(dia_semana)

print("‚úÖ Parte 3 carregada: Fun√ß√µes de Banco e Auxiliares")

# =============================================================================
# FUN√á√ïES WHATSAPP - CallMeBot
# =============================================================================

def enviar_whatsapp(telefone, mensagem):
    """
    Envia mensagem via WhatsApp usando CallMeBot.
    
    ‚úÖ CORRE√á√ÉO 6: Agora registra falhas em log + lista para relat√≥rio di√°rio
    
    Args:
        telefone (str): N√∫mero com DDI (ex: '+5531999999999')
        mensagem (str): Texto da mensagem (markdown b√°sico suportado)
    
    Returns:
        bool: True se enviou com sucesso, False se erro
    
    Observa√ß√µes:
        - Usa escape \n para quebra de linha
        - Suporta *negrito*, _it√°lico_
        - Timeout de 10 segundos
        - Falhas s√£o registradas em logs/whatsapp_falhas.log
    """
    global falhas_whatsapp_hoje
    
    try:
        # Buscar chave do telefone
        apikey = CALLMEBOT_KEYS.get(telefone)
        
        if not apikey:
            erro = f"Chave n√£o configurada para {telefone}"
            whatsapp_logger.error(erro)
            falhas_whatsapp_hoje.append({
                'telefone': telefone,
                'erro': erro,
                'timestamp': agora_sp().isoformat()
            })
            print(f"‚ùå {erro}")
            return False
        
        # Limpar telefone (remover caracteres especiais)
        phone = telefone.replace('+', '').replace('-', '').replace(' ', '')
        
        # Codificar mensagem para URL
        text = quote(mensagem)
        
        # Montar URL da API CallMeBot
        url = f"https://api.callmebot.com/whatsapp.php?phone={phone}&text={text}&apikey={apikey}"
        
        # Enviar requisi√ß√£o com timeout
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            print(f"‚úÖ WhatsApp enviado para {telefone}")
            return True
        else:
            erro = f"Erro HTTP {response.status_code}: {response.text}"
            whatsapp_logger.error(f"{telefone} - {erro}")
            falhas_whatsapp_hoje.append({
                'telefone': telefone,
                'erro': erro,
                'timestamp': agora_sp().isoformat()
            })
            print(f"‚ùå {erro}")
            return False
    
    except requests.Timeout:
        erro = "Timeout (10s)"
        whatsapp_logger.error(f"{telefone} - {erro}")
        falhas_whatsapp_hoje.append({
            'telefone': telefone,
            'erro': erro,
            'timestamp': agora_sp().isoformat()
        })
        print(f"‚ùå Timeout ao enviar WhatsApp para {telefone}")
        return False
    
    except Exception as e:
        erro = str(e)
        whatsapp_logger.error(f"{telefone} - {erro}")
        falhas_whatsapp_hoje.append({
            'telefone': telefone,
            'erro': erro,
            'timestamp': agora_sp().isoformat()
        })
        print(f"‚ùå Erro ao enviar WhatsApp: {e}")
        return False

# =============================================================================
# ‚úÖ CORRE√á√ÉO 2: WEBHOOK SEM VALIDA√á√ÉO WI-FI (estava incorreta!)
# =============================================================================

@app.route('/webhook/whatsapp', methods=['POST', 'GET'])
def webhook_whatsapp():
    """
    Recebe mensagens do WhatsApp via CallMeBot.
    
    ‚úÖ IMPORTANTE: SEM valida√ß√£o de Wi-Fi!
    Motivo: IP do request √© do servidor CallMeBot, n√£o da funcion√°ria.
    
    Comandos aceitos:
    - 'entrada', 'oi', 'bom dia', 'cheguei' ‚Üí Registra entrada
    - 'saida', 'sa√≠da', 'tchau', 'at√©', 'fui' ‚Üí Registra sa√≠da
    - 'ponto', 'status', 'hoje' ‚Üí Consulta ponto do dia
    
    ‚ö†Ô∏è SOBRE LOCALIZA√á√ÉO:
    N√£o h√° como validar localiza√ß√£o via WhatsApp!
    Recomenda√ß√µes:
    1. Confie nas funcion√°rias
    2. Monitore padr√µes suspeitos (sempre mesma hora exata)
    3. Cruze com c√¢meras da loja (se tiver)
    4. Em caso de suspeita, pe√ßa foto da tela do celular com localiza√ß√£o
    
    Retorna sempre '200 OK' para CallMeBot n√£o reenviar.
    """
    try:
        # CallMeBot envia dados via GET params
        telefone = request.args.get('phone')  # Sem o '+'
        mensagem = request.args.get('text', '').lower().strip()
        
        if not telefone or not mensagem:
            return "OK", 200
        
        # Adicionar '+' ao telefone
        telefone_formatado = f"+{telefone}"
        
        # Buscar funcion√°ria pelo telefone
        funcionaria = query_db(
            "SELECT * FROM users WHERE telefone = %s AND tipo = 'funcionaria'",
            (telefone_formatado,),
            one=True
        )
        
        if not funcionaria:
            print(f"‚ö†Ô∏è Telefone n√£o cadastrado: {telefone_formatado}")
            return "OK", 200
        
        # Pegar data/hora atual de S√£o Paulo
        hoje = hoje_sp().isoformat()
        now_time = agora_sp().strftime('%H:%M:%S')
        
        # COMANDO: ENTRADA
        if any(palavra in mensagem for palavra in ['entrada', 'oi', 'bom dia', 'cheguei', 'ol√°', 'ola']):
            record = query_db(
                "SELECT * FROM records WHERE user_id = %s AND data = %s",
                (funcionaria['id'], hoje),
                one=True
            )
            
            if record and record['hora_entrada']:
                resposta = f"‚ö†Ô∏è Voc√™ j√° registrou entrada hoje √†s {format_hora(record['hora_entrada'])}"
            else:
                # Registrar entrada
                if record:
                    execute_db(
                        "UPDATE records SET hora_entrada = %s WHERE id = %s",
                        (now_time, record['id'])
                    )
                else:
                    execute_db(
                        "INSERT INTO records (user_id, data, hora_entrada) VALUES (%s, %s, %s)",
                        (funcionaria['id'], hoje, now_time)
                    )
                
                resposta = (
                    f"‚úÖ *Entrada registrada!*\n\n"
                    f"üìÖ Data: {hoje_sp().strftime('%d/%m/%Y')}\n"
                    f"üïê Hor√°rio: {now_time[:5]}\n\n"
                    f"Tenha um √≥timo dia! üí™"
                )
            
            enviar_whatsapp(telefone_formatado, resposta)
        
        # COMANDO: SA√çDA
        elif any(palavra in mensagem for palavra in ['saida', 'sa√≠da', 'tchau', 'ate', 'at√©', 'fui', 'indo']):
            record = query_db(
                "SELECT * FROM records WHERE user_id = %s AND data = %s",
                (funcionaria['id'], hoje),
                one=True
            )
            
            if not record or not record['hora_entrada']:
                resposta = "‚ùå Voc√™ ainda n√£o registrou entrada hoje!"
            elif record['hora_saida']:
                resposta = f"‚ö†Ô∏è Voc√™ j√° registrou sa√≠da √†s {format_hora(record['hora_saida'])}"
            else:
                # Registrar sa√≠da
                execute_db(
                    "UPDATE records SET hora_saida = %s WHERE id = %s",
                    (now_time, record['id'])
                )
                
                # Calcular horas trabalhadas
                entrada_time = (
                    datetime.strptime(record['hora_entrada'], '%H:%M:%S').time()
                    if isinstance(record['hora_entrada'], str)
                    else record['hora_entrada']
                )
                saida_time = datetime.strptime(now_time, '%H:%M:%S').time()
                
                dt_entrada = datetime.combine(date.today(), entrada_time)
                dt_saida = datetime.combine(date.today(), saida_time)
                diff = dt_saida - dt_entrada
                
                horas = int(diff.total_seconds() // 3600)
                minutos = int((diff.total_seconds() % 3600) // 60)
                
                resposta = (
                    f"‚úÖ *Sa√≠da registrada!*\n\n"
                    f"üìä RESUMO DO DIA:\n"
                    f"üìÖ Data: {hoje_sp().strftime('%d/%m/%Y')}\n"
                    f"üïê Entrada: {format_hora(record['hora_entrada'])}\n"
                    f"üïî Sa√≠da: {now_time[:5]}\n"
                    f"‚è±Ô∏è Trabalhado: {horas}h{minutos:02d}m\n\n"
                    f"D√∫vidas? Acesse: {URL_SITE}\n\n"
                    f"At√© amanh√£! üëã"
                )
            
            enviar_whatsapp(telefone_formatado, resposta)
        
        # COMANDO: CONSULTAR PONTO
        elif 'ponto' in mensagem or 'status' in mensagem or 'hoje' in mensagem:
            record = query_db(
                "SELECT * FROM records WHERE user_id = %s AND data = %s",
                (funcionaria['id'], hoje),
                one=True
            )
            
            if not record or not record['hora_entrada']:
                resposta = "üìä *Ponto de hoje*\n\nAinda n√£o registrado."
            elif record['hora_saida']:
                entrada_time = (
                    datetime.strptime(record['hora_entrada'], '%H:%M:%S').time()
                    if isinstance(record['hora_entrada'], str)
                    else record['hora_entrada']
                )
                saida_time = (
                    datetime.strptime(record['hora_saida'], '%H:%M:%S').time()
                    if isinstance(record['hora_saida'], str)
                    else record['hora_saida']
                )
                
                dt_entrada = datetime.combine(date.today(), entrada_time)
                dt_saida = datetime.combine(date.today(), saida_time)
                diff = dt_saida - dt_entrada
                
                horas = int(diff.total_seconds() // 3600)
                minutos = int((diff.total_seconds() % 3600) // 60)
                
                resposta = (
                    f"üìä *Ponto de hoje*\n\n"
                    f"‚úÖ Entrada: {format_hora(record['hora_entrada'])}\n"
                    f"‚úÖ Sa√≠da: {format_hora(record['hora_saida'])}\n"
                    f"‚è±Ô∏è Trabalhado: {horas}h{minutos:02d}m"
                )
            else:
                resposta = (
                    f"üìä *Ponto de hoje*\n\n"
                    f"‚úÖ Entrada: {format_hora(record['hora_entrada'])}\n"
                    f"‚è≥ Sa√≠da: Ainda trabalhando..."
                )
            
            enviar_whatsapp(telefone_formatado, resposta)
        
        else:
            # Comando n√£o reconhecido
            resposta = (
                "ü§ñ *Comandos dispon√≠veis:*\n\n"
                "‚Ä¢ Digite *entrada* para registrar entrada\n"
                "‚Ä¢ Digite *saida* para registrar sa√≠da\n"
                "‚Ä¢ Digite *ponto* para consultar seu ponto\n\n"
                "üí° Dica: 'oi', 'tchau' tamb√©m funcionam!"
            )
            enviar_whatsapp(telefone_formatado, resposta)
        
        return "OK", 200
    
    except Exception as e:
        whatsapp_logger.error(f"Erro no webhook: {e}")
        print(f"‚ùå Erro no webhook: {e}")
        return "OK", 200

# =============================================================================
# ROTAS DE TESTE WHATSAPP (pode remover em produ√ß√£o)
# =============================================================================

@app.route('/testar-whatsapp')
# @login_required  # ‚Üê Descomente para exigir login
def testar_whatsapp():
    """
    Rota de teste: Envia mensagem para o n√∫mero Teste.
    Acesse: /testar-whatsapp
    """
    telefone = '+553193731622'  # Teste1
    mensagem = "üéâ Teste de WhatsApp! Se voc√™ recebeu isso, est√° funcionando!"
    
    sucesso = enviar_whatsapp(telefone, mensagem)
    
    if sucesso:
        return "‚úÖ Mensagem enviada! Verifique seu WhatsApp."
    else:
        return "‚ùå Erro ao enviar. Verifique logs/whatsapp_falhas.log"

@app.route('/testar-wpp/<telefone>')
def testar_wpp_numero(telefone):
    """
    Rota de teste: Envia mensagem para qualquer n√∫mero.
    Exemplo: /testar-wpp/5531999999999
    """
    telefone_formatado = f"+{telefone}" if not telefone.startswith('+') else telefone
    mensagem = "üß™ Teste de WhatsApp! Se voc√™ recebeu isso, est√° funcionando!"
    
    sucesso = enviar_whatsapp(telefone_formatado, mensagem)
    
    if sucesso:
        return f"‚úÖ Mensagem enviada para {telefone_formatado}!"
    else:
        return (
            f"‚ùå Erro ao enviar para {telefone_formatado}.<br><br>"
            f"Verifique:<br>"
            f"1. Chave CallMeBot configurada em CALLMEBOT_KEYS<br>"
            f"2. N√∫mero correto (com DDI)<br>"
            f"3. Arquivo logs/whatsapp_falhas.log para detalhes"
        )

print("‚úÖ Parte 4 carregada: Fun√ß√µes e Webhook WhatsApp")

# =============================================================================
# ROTAS DE AUTENTICA√á√ÉO
# =============================================================================

@app.route('/', methods=['GET', 'POST'])
def login():
    """
    P√°gina de login do sistema.
    Admin ‚Üí Redireciona para /admin
    Funcion√°ria ‚Üí Redireciona para /funcionaria
    """
    session.pop('_flashes', None)

    if request.method == 'POST':
        username = request.form['username'].strip()
        senha = request.form['senha'].encode()
        
        user = query_db(
            "SELECT * FROM users WHERE username = %s",
            (username,),
            one=True
        )
        
        if user and bcrypt.checkpw(
            senha,
            user['senha'].encode() if isinstance(user['senha'], str) else user['senha']
        ):
            # Login bem-sucedido
            session['user_id'] = user['id']
            session['username'] = user['username']
            session['nome'] = user['nome']
            session['tipo'] = user['tipo']
            
            # Redirecionar baseado no tipo
            if user['tipo'] == 'funcionaria':
                return redirect(url_for('funcionaria'))
            else:
                return redirect(url_for('admin'))
        else:
            flash('Usu√°rio ou senha inv√°lidos.')
    
    return render_template('login.html')

@app.route('/logout')
def logout():
    """
    Faz logout e limpa sess√£o.
    """
    session.clear()
    return redirect(url_for('login'))

# =============================================================================
# ROTAS DA FUNCION√ÅRIA
# =============================================================================

@app.route('/funcionaria', methods=['GET', 'POST'])
@login_required
def funcionaria():
    """
    Tela principal da funcion√°ria.
    
    Funcionalidades:
    - Registrar entrada/sa√≠da (SEM valida√ß√£o Wi-Fi - removida)
    - Ver registro do dia
    - Ver hist√≥rico do m√™s
    - Ver solicita√ß√µes de corre√ß√£o
    """
    if session.get('tipo') != 'funcionaria':
        flash('Acesso negado.')
        return redirect(url_for('login'))
    
    user_id = session['user_id']
    hoje = hoje_sp().isoformat()
    
    cleanup_old_records()
    
    if request.method == 'POST':
        try:
            # ‚úÖ VALIDA√á√ÉO DE WI-FI REMOVIDA
            # Motivo: N√£o funciona com servidor externo (PythonAnywhere)
            # Seguran√ßa mantida via: Login + senha + revis√£o do admin
            
            acao = request.form.get('acao')
            now_time = agora_sp().strftime('%H:%M:%S')
            
            record = query_db(
                "SELECT * FROM records WHERE user_id = %s AND data = %s",
                (user_id, hoje),
                one=True
            )
            
            if acao == 'entrada':
                if record and record['hora_entrada']:
                    flash('Voc√™ j√° registrou entrada hoje.', 'warning')
                else:
                    if record:
                        execute_db(
                            "UPDATE records SET hora_entrada = %s WHERE id = %s",
                            (now_time, record['id'])
                        )
                    else:
                        execute_db(
                            "INSERT INTO records (user_id, data, hora_entrada) VALUES (%s, %s, %s)",
                            (user_id, hoje, now_time)
                        )
                    flash('‚úÖ Entrada registrada com sucesso!', 'success')
            
            elif acao == 'saida':
                if not record or not record['hora_entrada']:
                    flash('Voc√™ ainda n√£o registrou entrada hoje.', 'error')
                elif record['hora_saida']:
                    flash('Voc√™ j√° registrou sa√≠da hoje.', 'warning')
                else:
                    execute_db(
                        "UPDATE records SET hora_saida = %s WHERE id = %s",
                        (now_time, record['id'])
                    )
                    flash('‚úÖ Sa√≠da registrada com sucesso!', 'success')
            
            return redirect(url_for('funcionaria'))
        
        except Exception as e:
            print(f"‚ùå ERRO AO REGISTRAR: {e}")
            import traceback
            traceback.print_exc()
            flash(f'Erro ao registrar: {str(e)}', 'error')
            return redirect(url_for('funcionaria'))
    
    # GET - Buscar dados para exibir
    hoje_date = hoje_sp()
    
    # Registro de hoje
    record = query_db(
        "SELECT * FROM records WHERE user_id = %s AND data = %s",
        (user_id, hoje),
        one=True
    )
    
    entrada_fmt = format_hora(record['hora_entrada']) if record else None
    saida_fmt = format_hora(record['hora_saida']) if record else None
    
    # Pegar m√™s/ano da URL (se existir) ou usar m√™s atual
    mes_param = request.args.get('mes', type=int)
    ano_param = request.args.get('ano', type=int)
    
    if mes_param and ano_param:
        # Validar que n√£o √© futuro
        if ano_param > hoje_date.year or (ano_param == hoje_date.year and mes_param > hoje_date.month):
            mes_selecionado = hoje_date.month
            ano_selecionado = hoje_date.year
        else:
            mes_selecionado = mes_param
            ano_selecionado = ano_param
    else:
        mes_selecionado = hoje_date.month
        ano_selecionado = hoje_date.year
    
    # Buscar registros do m√™s selecionado
    registros_mes_raw = buscar_registros_mes(user_id, ano_selecionado, mes_selecionado)
    registros_mes = [processar_registro_para_exibicao(reg) for reg in registros_mes_raw]
    pendencias_count = contar_pendencias(registros_mes)
    
    # Nome do m√™s
    meses = ['Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho',
             'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']
    mes_atual = f"{meses[mes_selecionado - 1]} {ano_selecionado}"
    
    # Calcular m√™s anterior
    if mes_selecionado == 1:
        mes_anterior = 12
        ano_anterior = ano_selecionado - 1
    else:
        mes_anterior = mes_selecionado - 1
        ano_anterior = ano_selecionado
    
    # Calcular m√™s pr√≥ximo
    if mes_selecionado == 12:
        mes_proximo = 1
        ano_proximo = ano_selecionado + 1
    else:
        mes_proximo = mes_selecionado + 1
        ano_proximo = ano_selecionado
    
    # Calcular limite de 13 meses atr√°s (395 dias)
    limite_dias = hoje_date - timedelta(days=395)
    limite_mes = limite_dias.month
    limite_ano = limite_dias.year
    
    # Verificar se pode voltar (n√£o pode ir antes de 13 meses)
    data_anterior = date(ano_anterior, mes_anterior, 1)
    data_limite = date(limite_ano, limite_mes, 1)
    pode_voltar = data_anterior >= data_limite
    
    # Verificar se pode avan√ßar (n√£o pode ir para futuro)
    pode_avancar = (
        (ano_proximo < hoje_date.year) or
        (ano_proximo == hoje_date.year and mes_proximo <= hoje_date.month)
    )
    
    # Buscar solicita√ß√µes da funcion√°ria
    solicitacoes = query_db(
        """
        SELECT id, data_solicitacao, data_registro, tipo,
               horario_entrada, horario_saida, justificativa,
               status, observacao_admin, data_processamento
        FROM solicitacoes_correcao
        WHERE funcionaria_id = %s
        ORDER BY data_solicitacao DESC
        LIMIT 10
        """,
        (user_id,)
    )
    
    # Formatar solicita√ß√µes para exibi√ß√£o
    solicitacoes_formatadas = []
    for sol in solicitacoes:
        # Formatar datas
        data_solic = sol['data_solicitacao']
        if isinstance(data_solic, str):
            data_solic = datetime.strptime(data_solic, '%Y-%m-%d %H:%M:%S')
        
        data_reg = sol['data_registro']
        if isinstance(data_reg, str):
            data_reg = datetime.strptime(data_reg, '%Y-%m-%d').date()
        
        data_proc = sol['data_processamento']
        if data_proc and isinstance(data_proc, str):
            data_proc = datetime.strptime(data_proc, '%Y-%m-%d %H:%M:%S')
        
        # Traduzir tipo
        tipo_label = {
            'entrada': 'Falta entrada',
            'saida': 'Falta sa√≠da',
            'ambos': 'Faltam Entrada e sa√≠da'
        }.get(sol['tipo'], sol['tipo'])
        
        # Status em portugu√™s
        status_label = {
            'pendente': 'Pendente',
            'aprovado': 'Aprovado',
            'rejeitado': 'Rejeitado'
        }.get(sol['status'], sol['status'])
        
        # Formatar hor√°rios
        horario_entrada_fmt = format_hora(sol['horario_entrada']) if sol['horario_entrada'] else None
        horario_saida_fmt = format_hora(sol['horario_saida']) if sol['horario_saida'] else None
        
        solicitacoes_formatadas.append({
            'id': sol['id'],
            'data_solicitacao': data_solic.strftime('%d/%m/%Y √†s %H:%M'),
            'data_registro': data_reg.strftime('%d/%m/%Y'),
            'tipo': tipo_label,
            'status': sol['status'],
            'status_label': status_label,
            'horario_entrada': horario_entrada_fmt,
            'horario_saida': horario_saida_fmt,
            'observacao_admin': sol['observacao_admin'],
            'data_processamento': data_proc.strftime('%d/%m/%Y √†s %H:%M') if data_proc else None
        })
    
    return render_template(
        'func.html',
        nome=session['nome'],
        entrada=entrada_fmt,
        saida=saida_fmt,
        mes_atual=mes_atual,
        registros_mes=registros_mes,
        pendencias_count=pendencias_count,
        solicitacoes=solicitacoes_formatadas,
        mes_anterior=mes_anterior,
        ano_anterior=ano_anterior,
        mes_proximo=mes_proximo,
        ano_proximo=ano_proximo,
        pode_avancar=pode_avancar,
        pode_voltar=pode_voltar
    )
# =============================================================================
# FUN√á√ïES AUXILIARES PARA HIST√ìRICO DE PONTO
# =============================================================================

def buscar_registros_mes(user_id, ano, mes):
    """
    Busca todos os registros de ponto de um usu√°rio em um m√™s espec√≠fico.
    
    Args:
        user_id: ID do usu√°rio
        ano: Ano (int)
        mes: M√™s (int, 1-12)
    
    Returns:
        Lista de dicion√°rios com os registros
    """
    primeiro_dia = date(ano, mes, 1)
    
    if mes == 12:
        ultimo_dia = date(ano, 12, 31)
    else:
        ultimo_dia = date(ano, mes + 1, 1) - timedelta(days=1)
    
    registros_raw = query_db("""
        SELECT data, hora_entrada, hora_saida
        FROM records
        WHERE user_id = %s AND data >= %s AND data <= %s
        ORDER BY data DESC
    """, (user_id, primeiro_dia.isoformat(), ultimo_dia.isoformat()))
    
    return registros_raw

def processar_registro_para_exibicao(registro):
    """
    Processa registro para exibi√ß√£o no template.
    Calcula status, √≠cone e horas trabalhadas.
    """
    data_obj = registro['data']
    if isinstance(data_obj, str):
        data_obj = datetime.strptime(data_obj, '%Y-%m-%d').date()
    
    if registro['hora_entrada'] and registro['hora_saida']:
        status_class = 'completo'
        icone = '‚úÖ'
        horas_trabalhadas = calcular_horas_trabalhadas(
            registro['hora_entrada'],
            registro['hora_saida']
        )
    elif registro['hora_entrada']:
        status_class = 'incompleto'
        icone = '‚ö†Ô∏è'
        horas_trabalhadas = None
    else:
        status_class = 'ausente'
        icone = '‚ùå'
        horas_trabalhadas = None
    
    return {
        'data': data_obj.strftime('%d/%m'),
        'entrada': format_hora(registro['hora_entrada']),
        'saida': format_hora(registro['hora_saida']),
        'horas_trabalhadas': horas_trabalhadas,
        'icone': icone,
        'status_class': status_class
    }

def calcular_horas_trabalhadas(hora_entrada, hora_saida):
    """
    Calcula diferen√ßa entre entrada e sa√≠da.
    Retorna string formatada 'Xh YYm' ou None.
    """
    try:
        if isinstance(hora_entrada, str):
            hora_entrada = datetime.strptime(hora_entrada, '%H:%M:%S').time()
        if isinstance(hora_saida, str):
            hora_saida = datetime.strptime(hora_saida, '%H:%M:%S').time()
        
        dt_entrada = datetime.combine(date.today(), hora_entrada)
        dt_saida = datetime.combine(date.today(), hora_saida)
        diff = dt_saida - dt_entrada
        
        horas = int(diff.total_seconds() // 3600)
        minutos = int((diff.total_seconds() % 3600) // 60)
        
        return f'{horas}h{minutos:02d}m'
    except:
        return None

def contar_pendencias(registros_processados):
    """
    Conta registros incompletos ou ausentes.
    """
    return sum(1 for r in registros_processados
               if r['status_class'] in ['incompleto', 'ausente'])

print("‚úÖ Parte 5.1 carregada: Login e Funcion√°ria")

# =============================================================================
# ROTAS DO ADMIN
# =============================================================================

@app.route('/admin')
@admin_required
def admin():
    """
    Dashboard do administrador.
    """
    try:
        pendentes = query_db(
            "SELECT COUNT(*) as total FROM solicitacoes_correcao WHERE status = 'pendente'",
            one=True
        )
        pendentes_count = pendentes['total'] if pendentes else 0
    except:
        pendentes_count = 0
    
    return render_template(
        'admin.html',
        nome=session['nome'],
        pendentes_count=pendentes_count
    )

@app.route('/admin/perfil', methods=['GET', 'POST'])
@admin_required
def editar_perfil_admin():
    """
    Editar perfil do administrador.
    """
    user_id = session['user_id']
    user = query_db(
        "SELECT * FROM users WHERE id = %s AND tipo = 'admin'",
        (user_id,),
        one=True
    )
    
    if not user:
        flash('Usu√°rio admin n√£o encontrado.')
        return redirect(url_for('admin'))
    
    if request.method == 'POST':
        nome = request.form['nome'].strip()
        username = request.form['username'].strip()
        senha = request.form['senha']
        senha_confirm = request.form['senha_confirm']
        
        if not nome or not username:
            flash('Nome e usu√°rio s√£o obrigat√≥rios.')
            return redirect(url_for('editar_perfil_admin'))
        
        # Verificar se username j√° existe para outro usu√°rio
        exists = query_db(
            "SELECT * FROM users WHERE username = %s AND id != %s",
            (username, user_id),
            one=True
        )
        if exists:
            flash('Nome de usu√°rio j√° existe.')
            return redirect(url_for('editar_perfil_admin'))
        
        if senha:
            if senha != senha_confirm:
                flash('Senhas n√£o conferem.')
                return redirect(url_for('editar_perfil_admin'))
            senha_hash = bcrypt.hashpw(senha.encode(), bcrypt.gensalt())
            execute_db(
                "UPDATE users SET nome = %s, username = %s, senha = %s WHERE id = %s",
                (nome, username, senha_hash, user_id)
            )
        else:
            execute_db(
                "UPDATE users SET nome = %s, username = %s WHERE id = %s",
                (nome, username, user_id)
            )
        
        # Atualizar sess√£o
        session['nome'] = nome
        session['username'] = username
        
        flash('Perfil atualizado com sucesso.')
        return redirect(url_for('admin'))
    
    return render_template('admin_perfil.html', user=user)

# =============================================================================
# ROTAS DE CONFIGURA√á√ïES DO ADMIN
# =============================================================================

@app.route('/admin/configuracoes-pagamento', methods=['GET', 'POST'])
@admin_required
def configuracoes_pagamento():
    """
    Permite admin configurar valores de pagamento por dia da semana.
    
    GET: Exibe formul√°rio com valores atuais
    POST: Salva novos valores no banco
    """
    if request.method == 'POST':
        try:
            dias = ['segunda', 'terca', 'quarta', 'quinta', 'sexta', 'sabado', 'domingo']
            valores_atualizados = 0
            
            for dia in dias:
                valor_form = request.form.get(f'valor_{dia}')
                
                if valor_form:
                    # Converter valor (aceita v√≠rgula ou ponto)
                    valor_float = float(valor_form.replace(',', '.'))
                    
                    # Validar valor (entre 0.01 e 9999.99)
                    if valor_float < 0.01 or valor_float > 9999.99:
                        flash(f'‚ùå Valor inv√°lido para {dia.capitalize()}: deve estar entre R$ 0,01 e R$ 9.999,99', 'error')
                        return redirect(url_for('configuracoes_pagamento'))
                    
                    # Atualizar no banco
                    execute_db(
                        """
                        UPDATE configuracoes_pagamento 
                        SET valor_hora = %s, 
                            atualizado_por = %s,
                            data_atualizacao = NOW()
                        WHERE tipo_dia = %s
                        """,
                        (valor_float, session['nome'], dia)
                    )
                    valores_atualizados += 1
            
            if valores_atualizados > 0:
                flash(f'‚úÖ {valores_atualizados} valor(es) atualizado(s) com sucesso!', 'success')
            else:
                flash('‚ö†Ô∏è Nenhum valor foi alterado.', 'warning')
            
            return redirect(url_for('configuracoes_pagamento'))
        
        except ValueError as e:
            flash(f'‚ùå Erro ao processar valores: formato inv√°lido. Use n√∫meros com v√≠rgula ou ponto.', 'error')
            return redirect(url_for('configuracoes_pagamento'))
        
        except Exception as e:
            flash(f'‚ùå Erro ao atualizar valores: {str(e)}', 'error')
            print(f"ERRO em configuracoes_pagamento: {e}")
            import traceback
            traceback.print_exc()
            return redirect(url_for('configuracoes_pagamento'))
    
    # GET - Buscar valores atuais do banco
    try:
        configuracoes = query_db("""
            SELECT 
                tipo_dia, 
                valor_hora, 
                DATE_FORMAT(data_atualizacao, '%%d/%%m/%%Y √†s %%H:%%i') as data_atualizacao_formatada,
                atualizado_por
            FROM configuracoes_pagamento 
            WHERE ativo = 1
            ORDER BY FIELD(tipo_dia, 'segunda', 'terca', 'quarta', 'quinta', 'sexta', 'sabado', 'domingo')
        """)
        
        # Se n√£o tem dados no banco, criar registros padr√£o
        if not configuracoes:
            dias_padroes = [
                ('segunda', 6.90), ('terca', 6.90), ('quarta', 6.90), 
                ('quinta', 6.90), ('sexta', 6.90), ('sabado', 6.90), ('domingo', 10.00)
            ]
            
            for dia, valor in dias_padroes:
                execute_db(
                    "INSERT INTO configuracoes_pagamento (tipo_dia, valor_hora, atualizado_por) VALUES (%s, %s, %s)",
                    (dia, valor, 'Sistema - Inicializa√ß√£o')
                )
            
            
            return redirect(url_for('configuracoes_pagamento'))
        
        return render_template('admin_config_pagamento.html', configuracoes=configuracoes)

    except Exception as e:
        print(f"ERRO ao buscar configuracoes: {e}")
        import traceback
        traceback.print_exc()
        return redirect(url_for('admin'))

# =============================================================================
# ROTAS DE GERENCIAMENTO DE FUNCION√ÅRIAS (CRUD)
# =============================================================================

@app.route('/admin/funcionarias')
@admin_required
def listar_funcionarias():
    """
    Lista todas as funcion√°rias.
    """
    users = query_db("SELECT * FROM users WHERE tipo = 'funcionaria' ORDER BY nome")
    return render_template('funcionarias.html', users=users)

@app.route('/admin/funcionarias/novo', methods=['GET', 'POST'])
@admin_required
def nova_funcionaria():
    """
    Cria nova funcion√°ria.
    """
    if request.method == 'POST':
        nome = request.form['nome'].strip()
        username = request.form['username'].strip()
        senha = request.form['senha']
        senha_confirm = request.form['senha_confirm']
        
        if not nome or not username or not senha:
            flash('Preencha todos os campos.')
            return redirect(url_for('nova_funcionaria'))
        
        if senha != senha_confirm:
            flash('Senhas n√£o conferem.')
            return redirect(url_for('nova_funcionaria'))
        
        exists = query_db(
            "SELECT * FROM users WHERE username = %s",
            (username,),
            one=True
        )
        if exists:
            flash('Nome de usu√°rio j√° existe.')
            return redirect(url_for('nova_funcionaria'))
        
        senha_hash = bcrypt.hashpw(senha.encode(), bcrypt.gensalt())
        execute_db(
            "INSERT INTO users (nome, username, senha, tipo) VALUES (%s, %s, %s, 'funcionaria')",
            (nome, username, senha_hash)
        )
        flash('Funcion√°ria criada com sucesso.')
        return redirect(url_for('listar_funcionarias'))
    
    return render_template('funcionaria_form.html', acao='novo')

@app.route('/admin/funcionarias/editar/<int:user_id>', methods=['GET', 'POST'])
@admin_required
def editar_funcionaria(user_id):
    """
    Edita funcion√°ria existente.
    """
    user = query_db(
        "SELECT * FROM users WHERE id = %s AND tipo = 'funcionaria'",
        (user_id,),
        one=True
    )
    
    if not user:
        flash('Funcion√°ria n√£o encontrada.')
        return redirect(url_for('listar_funcionarias'))
    
    if request.method == 'POST':
        nome = request.form['nome'].strip()
        username = request.form['username'].strip()  # ‚úÖ NOVO
        senha = request.form['senha']
        senha_confirm = request.form['senha_confirm']
        
        if not nome or not username:  # ‚úÖ NOVO
            flash('Nome e usu√°rio s√£o obrigat√≥rios.')
            return redirect(url_for('editar_funcionaria', user_id=user_id))
        
        # ‚úÖ NOVO: Verificar se username j√° existe para outra funcion√°ria
        exists = query_db(
            "SELECT * FROM users WHERE username = %s AND id != %s",
            (username, user_id),
            one=True
        )
        if exists:
            flash('Nome de usu√°rio j√° existe.')
            return redirect(url_for('editar_funcionaria', user_id=user_id))
        
        if senha:
            if senha != senha_confirm:
                flash('Senhas n√£o conferem.')
                return redirect(url_for('editar_funcionaria', user_id=user_id))
            senha_hash = bcrypt.hashpw(senha.encode(), bcrypt.gensalt())
            execute_db(
                "UPDATE users SET nome = %s, username = %s, senha = %s WHERE id = %s",  # ‚úÖ NOVO
                (nome, username, senha_hash, user_id)
            )
        else:
            execute_db(
                "UPDATE users SET nome = %s, username = %s WHERE id = %s",  # ‚úÖ NOVO
                (nome, username, user_id)
            )
        
        flash('Funcion√°ria atualizada.')
        return redirect(url_for('listar_funcionarias'))
    
    return render_template('funcionaria_form.html', user=user, acao='editar')

@app.route('/admin/funcionarias/excluir/<int:user_id>', methods=['POST'])
@admin_required
def excluir_funcionaria(user_id):
    execute_db("DELETE FROM records WHERE user_id = %s", (user_id,))
    execute_db("DELETE FROM users WHERE id = %s AND tipo = 'funcionaria'", (user_id,))
    flash('Funcion√°ria exclu√≠da.')
    return redirect(url_for('listar_funcionarias'))

print("‚úÖ Parte 5.2 carregada: Admin e Funcion√°rias CRUD")

# =============================================================================
# ROTAS DE GERENCIAMENTO DE REGISTROS
# =============================================================================

@app.route('/admin/registros', methods=['GET', 'POST'])
@admin_required
def listar_registros():
    """
    Lista registros de ponto com filtro de per√≠odo.
    """
    cleanup_old_records()
    
    users = query_db("SELECT * FROM users WHERE tipo = 'funcionaria' ORDER BY nome")
    
    hoje = hoje_sp()
    data_fim_str = hoje.strftime('%Y-%m-%d')
    data_inicio_default = hoje - timedelta(days=89)
    data_inicio_str = data_inicio_default.strftime('%Y-%m-%d')
    
    def format_data(d):
        if d is None:
            return '-'
        if isinstance(d, (datetime, date)):
            return d.strftime('%d/%m/%Y')
        try:
            dt = datetime.strptime(d, '%Y-%m-%d')
            return dt.strftime('%d/%m/%Y')
        except:
            return d  # ‚úÖ CORRIGIDO: retorna o valor original
    
    if request.method == 'POST':
        data_inicio_str = request.form.get('data_inicio')
        data_fim_str = request.form.get('data_fim')
        
        try:
            dt_inicio = datetime.strptime(data_inicio_str, '%Y-%m-%d').date()
            dt_fim = datetime.strptime(data_fim_str, '%Y-%m-%d').date()
            
            if dt_fim < dt_inicio:
                flash('Data fim deve ser maior ou igual √† data in√≠cio.')
                return redirect(url_for('listar_registros'))
            
            limite_min = hoje - timedelta(days=395)
            if dt_inicio < limite_min:
                dt_inicio = limite_min
                data_inicio_str = dt_inicio.strftime('%Y-%m-%d')
                flash('O per√≠odo m√≠nimo permitido √© de at√© 13 meses atr√°s. Ajustado a data de in√≠cio.')
            if dt_fim > hoje:
                dt_fim = hoje
                data_fim_str = dt_fim.strftime('%Y-%m-%d')
                flash('Data fim n√£o pode ser depois de hoje. Ajustado.')
        except Exception:
            flash('Formato de data inv√°lido.')
            return redirect(url_for('listar_registros'))
    else:
        dt_inicio = datetime.strptime(data_inicio_str, '%Y-%m-%d').date()
        dt_fim = datetime.strptime(data_fim_str, '%Y-%m-%d').date()
    
    # ‚úÖ CORRIGIDO: Query dentro do fluxo correto, sem v√≠rgula extra
    registros_raw = query_db("""
        SELECT r.id, r.data, r.hora_entrada, r.hora_saida, r.observacoes, u.nome, u.id as user_id
        FROM records r
        JOIN users u ON r.user_id = u.id
        WHERE r.data BETWEEN %s AND %s
        ORDER BY u.nome ASC, r.data ASC
    """, (dt_inicio.isoformat(), dt_fim.isoformat()))
    
    registros_por_func = {}
    for r in registros_raw:
        user_nome = r['nome']
        if user_nome not in registros_por_func:
            registros_por_func[user_nome] = []
        
        data_fmt = format_data(r['data'])
        hora_entrada_fmt = format_hora(r['hora_entrada'])
        hora_saida_fmt = format_hora(r['hora_saida'])
        
        registros_por_func[user_nome].append({
            'id': r['id'],
            'data': data_fmt,
            'hora_entrada': hora_entrada_fmt,
            'hora_saida': hora_saida_fmt,
            'observacoes': r['observacoes'] or ''
        })
    
    return render_template('registros.html',
                           registros_por_func=registros_por_func,
                           data_inicio=data_inicio_str,
                           data_fim=data_fim_str)

@app.route('/admin/registro/editar/<int:record_id>', methods=['GET', 'POST'])
@admin_required
def editar_registro(record_id):
    """
    Edita registro existente.
    """
    record = query_db(
        "SELECT r.*, u.nome FROM records r JOIN users u ON r.user_id = u.id WHERE r.id = %s",
        (record_id,),
        one=True
    )
    
    if not record:
        flash('Registro n√£o encontrado.')
        return redirect(url_for('listar_registros'))
    
    if request.method == 'POST':
        data = request.form['data']
        hora_entrada = request.form['hora_entrada'].strip() or None
        hora_saida = request.form['hora_saida'].strip() or None
        observacoes = request.form.get('observacoes', '').strip()
        
        # Validar e formatar horas
        def format_and_validate_time(t):
            if not t or t == '':
                return None
            try:
                if len(t) == 5 and ':' in t:
                    dt = datetime.strptime(t, '%H:%M')
                    return dt.strftime('%H:%M:%S')
                elif len(t) == 8 and t.count(':') == 2:
                    dt = datetime.strptime(t, '%H:%M:%S')
                    return dt.strftime('%H:%M:%S')
                else:
                    return None
            except:
                return None
        
        hora_entrada_formatted = format_and_validate_time(hora_entrada)
        hora_saida_formatted = format_and_validate_time(hora_saida)
        
        if hora_entrada and not hora_entrada_formatted:
            flash('Formato de entrada inv√°lido. Use HH:MM ou HH:MM:SS (ex: 08:00)', 'error')
            return redirect(url_for('editar_registro', record_id=record_id))
        
        if hora_saida and not hora_saida_formatted:
            flash('Formato de sa√≠da inv√°lido. Use HH:MM ou HH:MM:SS (ex: 18:00)', 'error')
            return redirect(url_for('editar_registro', record_id=record_id))
        
        # Validar que a data n√£o √© futura
        data_obj = datetime.strptime(data, '%Y-%m-%d').date()
        if data_obj > hoje_sp():  # ‚úÖ CORRE√á√ÉO: usa hoje_sp()
            flash('N√£o √© poss√≠vel criar registro para data futura.', 'error')
            return redirect(url_for('editar_registro', record_id=record_id))
        
        try:
            execute_db(
                "UPDATE records SET data = %s, hora_entrada = %s, hora_saida = %s, observacoes = %s WHERE id = %s",
                (data, hora_entrada_formatted, hora_saida_formatted, observacoes, record_id)
            )
            flash('‚úÖ Registro atualizado com sucesso!', 'success')
            return redirect(url_for('listar_registros'))
        except Exception as e:
            flash(f'‚ùå Erro ao atualizar registro: {str(e)}', 'error')
            return redirect(url_for('editar_registro', record_id=record_id))
    
    return render_template('registro_form.html', record=record)

@app.route('/admin/registro/excluir/<int:record_id>', methods=['POST'])
@admin_required
def excluir_registro(record_id):
    """
    Exclui registro.
    """
    execute_db("DELETE FROM records WHERE id = %s", (record_id,))
    flash('Registro exclu√≠do.')
    return redirect(url_for('listar_registros'))

@app.route('/admin/registro/novo', methods=['GET', 'POST'])
@admin_required
def novo_registro():
    """
    Cria novo registro manualmente.
    """
    users = query_db("SELECT * FROM users WHERE tipo = 'funcionaria' ORDER BY nome")
    
    if request.method == 'POST':
        user_id = request.form['user_id']
        data = request.form['data']
        hora_entrada = request.form['hora_entrada'].strip() or None
        hora_saida = request.form['hora_saida'].strip() or None
        observacoes = request.form.get('observacoes', '').strip()
        
        # Validar e formatar horas
        def format_and_validate_time(t):
            if not t or t == '':
                return None
            try:
                if len(t) == 5 and ':' in t:
                    dt = datetime.strptime(t, '%H:%M')
                    return dt.strftime('%H:%M:%S')
                elif len(t) == 8 and t.count(':') == 2:
                    dt = datetime.strptime(t, '%H:%M:%S')
                    return dt.strftime('%H:%M:%S')
                else:
                    return None
            except:
                return None
        
        hora_entrada_formatted = format_and_validate_time(hora_entrada)
        hora_saida_formatted = format_and_validate_time(hora_saida)
        
        if not hora_entrada_formatted and not hora_saida_formatted:
            flash('Informe pelo menos entrada ou sa√≠da. Use formato HH:MM ou HH:MM:SS', 'error')
            return redirect(url_for('novo_registro'))
        
        if hora_entrada and not hora_entrada_formatted:
            flash('Formato de entrada inv√°lido. Use HH:MM ou HH:MM:SS (ex: 08:00 ou 08:00:00)', 'error')
            return redirect(url_for('novo_registro'))
        
        if hora_saida and not hora_saida_formatted:
            flash('Formato de sa√≠da inv√°lido. Use HH:MM ou HH:MM:SS (ex: 18:00 ou 18:00:00)', 'error')
            return redirect(url_for('novo_registro'))
        
        # Validar que a data n√£o √© futura
        data_obj = datetime.strptime(data, '%Y-%m-%d').date()
        if data_obj > hoje_sp():  # ‚úÖ CORRE√á√ÉO: usa hoje_sp()
            flash('N√£o √© poss√≠vel criar registro para data futura.', 'error')
            return redirect(url_for('novo_registro'))
        
        try:
            execute_db(
                "INSERT INTO records (user_id, data, hora_entrada, hora_saida, observacoes) VALUES (%s, %s, %s, %s, %s)",
                (user_id, data, hora_entrada_formatted, hora_saida_formatted, observacoes)
            )
            flash('‚úÖ Registro criado com sucesso!', 'success')
            return redirect(url_for('listar_registros'))
        except Exception as e:
            flash(f'‚ùå Erro ao criar registro: {str(e)}', 'error')
            return redirect(url_for('novo_registro'))
    
    return render_template('registro_form.html', users=users, novo=True)

# =============================================================================
# ROTA DE RELAT√ìRIO
# =============================================================================

@app.route('/admin/relatorio', methods=['GET', 'POST'])
@login_required
def relatorio():
    """
    Gera relat√≥rio de horas e valores para pagamento.
    """
    if session.get('tipo') != 'admin':
        flash('Acesso negado.')
        return redirect(url_for('login'))
    
    users = query_db("SELECT * FROM users WHERE tipo='funcionaria' ORDER BY nome")
    
    rel_data = None
    
    if request.method == 'POST':
        user_id = request.form.get('user_id')
        data_inicio = request.form.get('data_inicio')
        data_fim = request.form.get('data_fim')
        
        dt_inicio = datetime.strptime(data_inicio, '%Y-%m-%d').date()
        dt_fim = datetime.strptime(data_fim, '%Y-%m-%d').date()
        
        delta = dt_fim - dt_inicio
        datas = [dt_inicio + timedelta(days=i) for i in range(delta.days + 1)]
        
        usuarios_rel = []
        
        for u in users:
            if user_id != 'todos' and str(u['id']) != user_id:
                continue
            
            linhas = []
            total_horas = timedelta()
            total_valor = 0
            
            for d in datas:
                registro = query_db(
                    "SELECT * FROM records WHERE user_id=%s AND data=%s",
                    (u['id'], d),
                    one=True
                )
                
                horas_trabalhadas = None
                valor = 0
                horas_str = '-'  # ‚úÖ Valor padr√£o
                
                if registro and registro['hora_entrada'] and registro['hora_saida']:
                    h_entrada = registro['hora_entrada']
                    h_saida = registro['hora_saida']
                    
                    # MySQL retorna timedelta direto
                    horas_trabalhadas = h_saida - h_entrada
                    horas_dec = horas_trabalhadas.total_seconds() / 3600
                    
                    # ‚úÖ USAR A FUN√á√ÉO HELPER para calcular valor/hora
                    valor_hora = calcular_valor_hora(d, u['nome'])
                    valor = round(horas_dec * valor_hora, 2)
                    
                    total_horas += horas_trabalhadas
                    total_valor += valor
                    
                    # ‚úÖ CORRE√á√ÉO: Formatar horas_trabalhadas como "Xh YYm"
                    total_seg = int(horas_trabalhadas.total_seconds())
                    h = total_seg // 3600
                    m = (total_seg % 3600) // 60
                    horas_str = f"{h}h{m:02d}m"
                
                linhas.append({
                    'data': d.strftime('%d/%m/%Y'),
                    'entrada': format_hora_banco(registro['hora_entrada']) if registro else '-',
                    'saida': format_hora_banco(registro['hora_saida']) if registro else '-',
                    'horas': horas_str,  # ‚úÖ Agora usa o formato correto
                    'valor': f"{valor:.2f}"
                })
            
            # ‚úÖ CORRE√á√ÉO: Formatar total_horas como "XXhYYm" ao inv√©s de "X days, H:M:S"
            if total_horas:
                total_segundos = int(total_horas.total_seconds())
                horas_totais = total_segundos // 3600
                minutos_totais = (total_segundos % 3600) // 60
                total_horas_str = f"{horas_totais}h{minutos_totais:02d}m"
            else:
                total_horas_str = "0h00m"
            
            usuarios_rel.append({
                'nome': u['nome'],
                'linhas': linhas,
                'total_horas': total_horas_str,
                'total_valor': f"{total_valor:.2f}"
            })
        
        rel_data = {
            'inicio': dt_inicio.strftime('%d/%m/%Y'),
            'fim': dt_fim.strftime('%d/%m/%Y'),
            'usuarios': usuarios_rel
        }
    
    return render_template('relatorio.html', users=users, rel_data=rel_data)

def format_hora_banco(h):
    """
    Formata hora do banco (pode vir como timedelta).
    """
    if h is None:
        return '-'
    if isinstance(h, timedelta):
        total_seg = int(h.total_seconds())
        horas = total_seg // 3600
        minutos = (total_seg % 3600) // 60
        return f"{horas:02d}:{minutos:02d}"
    if isinstance(h, (datetime, time)):
        return h.strftime('%H:%M')
    try:
        dt = datetime.strptime(str(h), '%H:%M:%S')
        return dt.strftime('%H:%M')
    except:
        return str(h)

print("‚úÖ Parte 5.3 carregada: Registros e Relat√≥rios")

# =============================================================================
# ROTAS DE SOLICITA√á√ïES DE CORRE√á√ÉO (COM PROTE√á√ïES)
# =============================================================================

@app.route('/funcionaria/solicitar-correcao', methods=['GET', 'POST'])
@login_required
def solicitar_correcao():
    """
    Formul√°rio para funcion√°ria solicitar corre√ß√£o de ponto esquecido.
    O admin aprovar√°/rejeitar√° posteriormente.
    
    ‚úÖ NOVO: Previne m√∫ltiplas solicita√ß√µes pendentes para mesma data
    """
    if session.get('tipo') != 'funcionaria':
        flash('Acesso negado.')
        return redirect(url_for('login'))
    
    if request.method == 'POST':
        data_registro = request.form.get('data_registro')
        tipo = request.form.get('tipo')
        horario_entrada = request.form.get('horario_entrada') or None
        horario_saida = request.form.get('horario_saida') or None
        justificativa = request.form.get('justificativa', '').strip()
        
        if not data_registro or not tipo or not justificativa:
            flash('Preencha todos os campos obrigat√≥rios.')
            return redirect(url_for('solicitar_correcao'))
        
        # Validar que a data n√£o √© futura
        data_obj = datetime.strptime(data_registro, '%Y-%m-%d').date()
        if data_obj > hoje_sp():
            flash('N√£o √© poss√≠vel solicitar corre√ß√£o para datas futuras.')
            return redirect(url_for('solicitar_correcao'))
        
        # ‚úÖ NOVO: Verificar se j√° tem solicita√ß√£o pendente para mesma data
        pendente = query_db("""
            SELECT * FROM solicitacoes_correcao
            WHERE funcionaria_id = %s 
            AND data_registro = %s 
            AND status = 'pendente'
        """, (session['user_id'], data_registro), one=True)
        
        if pendente:
            flash('‚ùå Voc√™ j√° tem uma solicita√ß√£o pendente para esta data! Aguarde a aprova√ß√£o do administrador.', 'warning')
            return redirect(url_for('funcionaria'))
        
        # Inserir solicita√ß√£o
        execute_db("""
            INSERT INTO solicitacoes_correcao
            (funcionaria_id, data_registro, tipo, horario_entrada, horario_saida, justificativa)
            VALUES (%s, %s, %s, %s, %s, %s)
        """, (session['user_id'], data_registro, tipo, horario_entrada, horario_saida, justificativa))
        
        flash('Solicita√ß√£o enviada com sucesso! Aguarde aprova√ß√£o do administrador.')
        return redirect(url_for('funcionaria'))
    
    return render_template('solicitar_correcao.html')

# ‚úÖ Rota Excluir solicita√ß√£o pendente
@app.route('/funcionaria/solicitacao/excluir/<int:solicitacao_id>', methods=['POST'])
@login_required
def excluir_solicitacao(solicitacao_id):
    """
    Permite que funcion√°ria exclua sua pr√≥pria solicita√ß√£o PENDENTE.
    
    Regras:
    - S√≥ pode excluir pr√≥prias solicita√ß√µes
    - S√≥ pode excluir se status = 'pendente'
    - N√£o pode excluir aprovadas/rejeitadas
    """
    if session.get('tipo') != 'funcionaria':
        flash('Acesso negado.')
        return redirect(url_for('login'))
    
    # Buscar solicita√ß√£o
    solicitacao = query_db(
        "SELECT * FROM solicitacoes_correcao WHERE id = %s",
        (solicitacao_id,),
        one=True
    )
    
    # Valida√ß√µes
    if not solicitacao:
        flash('‚ùå Solicita√ß√£o n√£o encontrada.', 'error')
        return redirect(url_for('funcionaria'))
    
    # Verificar se √© da pr√≥pria funcion√°ria
    if solicitacao['funcionaria_id'] != session['user_id']:
        flash('‚ùå Voc√™ n√£o pode excluir solicita√ß√µes de outras pessoas!', 'error')
        return redirect(url_for('funcionaria'))
    
    # Verificar se est√° pendente
    if solicitacao['status'] != 'pendente':
        flash('‚ùå N√£o √© poss√≠vel excluir solicita√ß√µes j√° processadas.', 'warning')
        return redirect(url_for('funcionaria'))
    
    # Excluir solicita√ß√£o
    execute_db(
        "DELETE FROM solicitacoes_correcao WHERE id = %s",
        (solicitacao_id,)
    )
    
    flash('‚úÖ Solicita√ß√£o exclu√≠da com sucesso!', 'success')
    return redirect(url_for('funcionaria'))

@app.route('/admin/solicitacoes')
@admin_required
def listar_solicitacoes():
    """
    P√°gina do admin para visualizar e gerenciar solicita√ß√µes de corre√ß√£o.
    Mostra solicita√ß√µes pendentes, aprovadas e rejeitadas.
    
    ‚úÖ NOVO: Detecta e avisa quando j√° existe registro para a data
    """
    solicitacoes_raw = query_db("""
        SELECT s.*, u.nome as funcionaria_nome
        FROM solicitacoes_correcao s
        JOIN users u ON s.funcionaria_id = u.id
        ORDER BY
            CASE s.status
                WHEN 'pendente' THEN 1
                WHEN 'aprovado' THEN 2
                WHEN 'rejeitado' THEN 3
            END,
            s.data_solicitacao DESC
    """)
    
    solicitacoes_formatadas = []
    for sol in solicitacoes_raw:
        # Formatar datas
        data_solic = sol['data_solicitacao']
        if isinstance(data_solic, str):
            data_solic = datetime.strptime(data_solic, '%Y-%m-%d %H:%M:%S')
        
        data_reg = sol['data_registro']
        if isinstance(data_reg, str):
            data_reg = datetime.strptime(data_reg, '%Y-%m-%d').date()
        
        data_proc = sol['data_processamento']
        if data_proc and isinstance(data_proc, str):
            data_proc = datetime.strptime(data_proc, '%Y-%m-%d %H:%M:%S')
        
        # Traduzir tipo
        tipo_label = {
            'entrada': 'Falta entrada',
            'saida': 'Falta sa√≠da',
            'ambos': 'Faltam entrada e sa√≠da'
        }.get(sol['tipo'], sol['tipo'])
        
        # Status em portugu√™s
        status_label = {
            'pendente': 'Pendente',
            'aprovado': 'Aprovado',
            'rejeitado': 'Rejeitado'
        }.get(sol['status'], sol['status'])
        
        # Formatar hor√°rios
        horario_entrada_fmt = format_hora(sol['horario_entrada']) if sol['horario_entrada'] else None
        horario_saida_fmt = format_hora(sol['horario_saida']) if sol['horario_saida'] else None
        
        # ‚úÖ NOVO: Verificar se j√° existe registro para aquela data
        registro_existente = query_db("""
            SELECT hora_entrada, hora_saida
            FROM records
            WHERE user_id = %s AND data = %s
        """, (sol['funcionaria_id'], sol['data_registro']), one=True)
        
        tem_registro = bool(registro_existente)
        entrada_atual = format_hora(registro_existente['hora_entrada']) if registro_existente else None
        saida_atual = format_hora(registro_existente['hora_saida']) if registro_existente else None
        
        solicitacoes_formatadas.append({
            'id': sol['id'],
            'funcionaria_nome': sol['funcionaria_nome'],
            'data_solicitacao': data_solic.strftime('%d/%m/%Y √†s %H:%M'),
            'data_registro': data_reg.strftime('%d/%m/%Y'),
            'tipo': tipo_label,
            'status': sol['status'],
            'status_label': status_label,
            'horario_entrada': horario_entrada_fmt,
            'horario_saida': horario_saida_fmt,
            'justificativa': sol['justificativa'],
            'observacao_admin': sol['observacao_admin'],
            'data_processamento': data_proc.strftime('%d/%m/%Y √†s %H:%M') if data_proc else None,
            # ‚úÖ NOVO: Dados do registro existente
            'tem_registro_existente': tem_registro,
            'entrada_atual': entrada_atual,
            'saida_atual': saida_atual
        })
    
    pendentes_count = sum(1 for s in solicitacoes_formatadas if s['status'] == 'pendente')
    
    return render_template('admin_solicitacoes.html',
                          solicitacoes=solicitacoes_formatadas,
                          pendentes_count=pendentes_count)

@app.route('/admin/solicitacoes/aprovar/<int:solicitacao_id>', methods=['POST'])
@admin_required
def aprovar_solicitacao(solicitacao_id):
    """
    Aprova uma solicita√ß√£o de corre√ß√£o e atualiza/cria o registro de ponto.
    """
    solicitacao = query_db(
        "SELECT * FROM solicitacoes_correcao WHERE id = %s",
        (solicitacao_id,),
        one=True
    )
    
    if not solicitacao:
        flash('Solicita√ß√£o n√£o encontrada.')
        return redirect(url_for('listar_solicitacoes'))
    
    if solicitacao['status'] != 'pendente':
        flash('Esta solicita√ß√£o j√° foi processada.')
        return redirect(url_for('listar_solicitacoes'))
    
    registro_existente = query_db("""
        SELECT * FROM records
        WHERE user_id = %s AND data = %s
    """, (solicitacao['funcionaria_id'], solicitacao['data_registro']), one=True)
    
    tipo = solicitacao['tipo']
    
    if registro_existente:
        # Atualizar registro existente
        if tipo == 'entrada':
            execute_db("UPDATE records SET hora_entrada = %s WHERE id = %s",
                      (solicitacao['horario_entrada'], registro_existente['id']))
        elif tipo == 'saida':
            execute_db("UPDATE records SET hora_saida = %s WHERE id = %s",
                      (solicitacao['horario_saida'], registro_existente['id']))
        elif tipo == 'ambos':
            execute_db("UPDATE records SET hora_entrada = %s, hora_saida = %s WHERE id = %s",
                      (solicitacao['horario_entrada'], solicitacao['horario_saida'],
                       registro_existente['id']))
    else:
        # Criar novo registro
        execute_db("""
            INSERT INTO records (user_id, data, hora_entrada, hora_saida)
            VALUES (%s, %s, %s, %s)
        """, (solicitacao['funcionaria_id'], solicitacao['data_registro'],
              solicitacao['horario_entrada'], solicitacao['horario_saida']))
    
    observacao = request.form.get('observacao', '').strip()
    execute_db("""
        UPDATE solicitacoes_correcao
        SET status = 'aprovado',
            observacao_admin = %s,
            data_processamento = NOW()
        WHERE id = %s
    """, (observacao if observacao else 'Aprovado', solicitacao_id))
    
    flash('Solicita√ß√£o aprovada e registro atualizado com sucesso.')
    return redirect(url_for('listar_solicitacoes'))

@app.route('/admin/solicitacoes/rejeitar/<int:solicitacao_id>', methods=['POST'])
@admin_required
def rejeitar_solicitacao(solicitacao_id):
    """
    Rejeita uma solicita√ß√£o de corre√ß√£o com observa√ß√£o do motivo.
    """
    solicitacao = query_db(
        "SELECT * FROM solicitacoes_correcao WHERE id = %s",
        (solicitacao_id,),
        one=True
    )
    
    if not solicitacao:
        flash('Solicita√ß√£o n√£o encontrada.')
        return redirect(url_for('listar_solicitacoes'))
    
    if solicitacao['status'] != 'pendente':
        flash('Esta solicita√ß√£o j√° foi processada.')
        return redirect(url_for('listar_solicitacoes'))
    
    observacao = request.form.get('observacao', '').strip()
    if not observacao:
        flash('√â necess√°rio informar o motivo da rejei√ß√£o.')
        return redirect(url_for('listar_solicitacoes'))
    
    execute_db("""
        UPDATE solicitacoes_correcao
        SET status = 'rejeitado',
            observacao_admin = %s,
            data_processamento = NOW()
        WHERE id = %s
    """, (observacao, solicitacao_id))
    
    flash('Solicita√ß√£o rejeitada.')
    return redirect(url_for('listar_solicitacoes'))

@app.route('/admin/solicitacoes/aprovar-todas', methods=['POST'])
@admin_required
def aprovar_todas_solicitacoes():
    """
    Aprova todas as solicita√ß√µes pendentes de uma vez.
    """
    pendentes = query_db("""
        SELECT * FROM solicitacoes_correcao
        WHERE status = 'pendente'
    """)
    
    if not pendentes:
        flash('N√£o h√° solicita√ß√µes pendentes para aprovar.')
        return redirect(url_for('listar_solicitacoes'))
    
    aprovadas = 0
    erros = 0
    
    for solicitacao in pendentes:
        try:
            registro_existente = query_db("""
                SELECT * FROM records
                WHERE user_id = %s AND data = %s
            """, (solicitacao['funcionaria_id'], solicitacao['data_registro']), one=True)
            
            tipo = solicitacao['tipo']
            
            if registro_existente:
                if tipo == 'entrada':
                    execute_db("UPDATE records SET hora_entrada = %s WHERE id = %s",
                              (solicitacao['horario_entrada'], registro_existente['id']))
                elif tipo == 'saida':
                    execute_db("UPDATE records SET hora_saida = %s WHERE id = %s",
                              (solicitacao['horario_saida'], registro_existente['id']))
                elif tipo == 'ambos':
                    execute_db("UPDATE records SET hora_entrada = %s, hora_saida = %s WHERE id = %s",
                              (solicitacao['horario_entrada'], solicitacao['horario_saida'],
                               registro_existente['id']))
            else:
                execute_db("""
                    INSERT INTO records (user_id, data, hora_entrada, hora_saida)
                    VALUES (%s, %s, %s, %s)
                """, (solicitacao['funcionaria_id'], solicitacao['data_registro'],
                      solicitacao['horario_entrada'], solicitacao['horario_saida']))
            
            execute_db("""
                UPDATE solicitacoes_correcao
                SET status = 'aprovado',
                    observacao_admin = 'Aprovado em lote',
                    data_processamento = NOW()
                WHERE id = %s
            """, (solicitacao['id'],))
            
            aprovadas += 1
        
        except Exception as e:
            erros += 1
            continue
    
    if erros > 0:
        flash(f'{aprovadas} solicita√ß√£o(√µes) aprovada(s). {erros} erro(s) encontrado(s).')
    else:
        flash(f'‚úÖ {aprovadas} solicita√ß√£o(√µes) aprovada(s) com sucesso!')
    
    return redirect(url_for('listar_solicitacoes'))

print("‚úÖ Parte 5.4 carregada: Solicita√ß√µes de Corre√ß√£o (COM PROTE√á√ïES)")

# =============================================================================
# ‚úÖ CORRE√á√ÉO 12: DATAS ALTERADAS
# Funcion√°rias: Dia 1 e 2 (antes era 3 e 4)
# Admin pagamento: Dia 3 (antes era 5)
# =============================================================================

# =============================================================================
# FUN√á√ïES DE AUTOMA√á√ÉO - LEMBRETES E ALERTAS
# =============================================================================

def lembrete_entrada():
    """
    Envia lembrete √†s 8h APENAS para quem trabalha hoje nesse hor√°rio.
    Usa timezone de S√£o Paulo.
    """
    with app.app_context():
        funcionarias = query_db(
            "SELECT id, nome, telefone FROM users WHERE tipo = 'funcionaria' AND telefone IS NOT NULL"
        )
        
        hoje = hoje_sp()
        dias = ['seg', 'ter', 'qua', 'qui', 'sex', 'sab', 'dom']
        dia_semana = dias[hoje.weekday()]
        
        for func in funcionarias:
            horario = funcionaria_trabalha_hoje(func['nome'], dia_semana)
            
            if horario and horario['entrada'] == '08:00':
                mensagem = (
                    f"‚òÄÔ∏è *Bom dia, {func['nome']}!*\n\n"
                    f"‚è∞ Hora de registrar sua *ENTRADA*\n\n"
                    f"üîó Acesse: {URL_SITE}"
                )
                enviar_whatsapp(func['telefone'], mensagem)
                print(f"üì§ Lembrete de entrada enviado para {func['nome']}")

def lembrete_saida():
    """
    Envia lembrete de sa√≠da baseado no hor√°rio.
    S√ì envia se bateu entrada hoje.
    """
    with app.app_context():
        hoje_str = hoje_sp().isoformat()
        funcionarias = query_db(
            "SELECT id, nome, telefone FROM users WHERE tipo = 'funcionaria' AND telefone IS NOT NULL"
        )
        
        hoje = hoje_sp()
        dias = ['seg', 'ter', 'qua', 'qui', 'sex', 'sab', 'dom']
        dia_semana = dias[hoje.weekday()]
        
        hora_atual = agora_sp().strftime('%H:%M')
        
        for func in funcionarias:
            horario = funcionaria_trabalha_hoje(func['nome'], dia_semana)
            
            if not horario:
                continue
            
            record = query_db(
                "SELECT * FROM records WHERE user_id = %s AND data = %s",
                (func['id'], hoje_str),
                one=True
            )
            
            if record and record['hora_entrada'] and not record['hora_saida']:
                hora_saida_esperada = horario['saida'][:5]
                if hora_atual == hora_saida_esperada:
                    mensagem = (
                        f"üåô *Oi, {func['nome']}!*\n\n"
                        f"‚è∞ Lembra de registrar sua *SA√çDA*\n\n"
                        f"üîó Acesse: {URL_SITE}"
                    )
                    enviar_whatsapp(func['telefone'], mensagem)
                    print(f"üì§ Lembrete de sa√≠da enviado para {func['nome']}")

# ‚úÖ CORRE√á√ÉO 12: Dia 1 e 2 (antes era 3 e 4)
def alerta_pendencias_dia_01():
    """
    Dia 01 de cada m√™s - Alerta sobre pend√™ncias do m√™s anterior.
    Prazo: at√© dia 02.
    """
    with app.app_context():
        hoje = hoje_sp()
        mes_anterior_date = hoje - relativedelta(months=1)
        primeiro_dia = date(mes_anterior_date.year, mes_anterior_date.month, 1)
        ultimo_dia = date(hoje.year, hoje.month, 1) - timedelta(days=1)
        
        meses = ['Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho',
                 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']
        nome_mes = meses[mes_anterior_date.month - 1]
        
        admin = query_db("SELECT telefone FROM users WHERE tipo = 'admin' LIMIT 1", one=True)
        funcionarias = query_db(
            "SELECT id, nome, telefone FROM users WHERE tipo = 'funcionaria' AND telefone IS NOT NULL"
        )
        
        resumo_admin = f"‚ö†Ô∏è *ALERTA DE PEND√äNCIAS - DIA 01*\n\n"
        resumo_admin += f"M√™s: {nome_mes}/{mes_anterior_date.year}\n"
        resumo_admin += f"Prazo: AT√â AMANH√É (02)\n\n"
        
        tem_pendencias_geral = False
        
        for func in funcionarias:
            registros = query_db(
                "SELECT data, hora_entrada, hora_saida FROM records "
                "WHERE user_id = %s AND data >= %s AND data <= %s ORDER BY data",
                (func['id'], primeiro_dia.isoformat(), ultimo_dia.isoformat())
            )
            
            pendencias = []
            delta = ultimo_dia - primeiro_dia
            
            for i in range(delta.days + 1):
                dia = primeiro_dia + timedelta(days=i)
                dia_str = dia.isoformat()
                reg = next((r for r in registros if r['data'] == dia_str), None)
                
                if not reg or not reg['hora_entrada']:
                    pendencias.append(f"‚ùå {dia.strftime('%d/%m')}: N√£o registrado")
                elif not reg['hora_saida']:
                    pendencias.append(f"‚ö†Ô∏è {dia.strftime('%d/%m')}: Falta sa√≠da")
            
            if pendencias:
                tem_pendencias_geral = True
                mensagem = f"‚ö†Ô∏è *ATEN√á√ÉO {func['nome']}!*\n\n"
                mensagem += f"üìÖ *{nome_mes}/{mes_anterior_date.year}*\n\n"
                mensagem += f"Voc√™ tem *{len(pendencias)} pend√™ncia(s)*:\n\n"
                
                for pend in pendencias[:10]:
                    mensagem += f"{pend}\n"
                
                if len(pendencias) > 10:
                    mensagem += f"\n... e mais {len(pendencias) - 10}\n"
                
                mensagem += f"\nüö® *PRAZO: AMANH√É (DIA 02)*\n\n"
                mensagem += f"Acesse: {URL_SITE}\n"
                mensagem += f"Clique em 'Solicitar Corre√ß√£o'"
                
                enviar_whatsapp(func['telefone'], mensagem)
                resumo_admin += f"*{func['nome']}:* {len(pendencias)} pend√™ncia(s)\n"
        
        if tem_pendencias_geral and admin and admin['telefone']:
            enviar_whatsapp(admin['telefone'], resumo_admin)

def alerta_pendencias_dia_02():
    """
    Dia 02 - Alerta FINAL (c√≥digo similar ao dia 01, mas mais urgente).
    √öLTIMO DIA para regularizar pend√™ncias antes do fechamento!
    """
    with app.app_context():
        hoje = hoje_sp()
        mes_anterior_date = hoje - relativedelta(months=1)
        primeiro_dia = date(mes_anterior_date.year, mes_anterior_date.month, 1)
        ultimo_dia = date(hoje.year, hoje.month, 1) - timedelta(days=1)
        
        meses = ['Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho',
                 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']
        nome_mes = meses[mes_anterior_date.month - 1]
        
        admin = query_db("SELECT telefone FROM users WHERE tipo = 'admin' LIMIT 1", one=True)
        funcionarias = query_db(
            "SELECT id, nome, telefone FROM users WHERE tipo = 'funcionaria' AND telefone IS NOT NULL"
        )
        
        resumo_admin = f"üö® *ALERTA URGENTE - √öLTIMO DIA!*\n\n"
        resumo_admin += f"M√™s: {nome_mes}/{mes_anterior_date.year}\n"
        resumo_admin += f"‚ö†Ô∏è PRAZO FINAL: HOJE (DIA 02)\n\n"
        
        tem_pendencias_geral = False
        
        for func in funcionarias:
            registros = query_db(
                "SELECT data, hora_entrada, hora_saida FROM records "
                "WHERE user_id = %s AND data >= %s AND data <= %s ORDER BY data",
                (func['id'], primeiro_dia.isoformat(), ultimo_dia.isoformat())
            )
            
            pendencias = []
            delta = ultimo_dia - primeiro_dia
            
            for i in range(delta.days + 1):
                dia = primeiro_dia + timedelta(days=i)
                dia_str = dia.isoformat()
                reg = next((r for r in registros if r['data'] == dia_str), None)
                
                if not reg or not reg['hora_entrada']:
                    pendencias.append(f"‚ùå {dia.strftime('%d/%m')}: N√£o registrado")
                elif not reg['hora_saida']:
                    pendencias.append(f"‚ö†Ô∏è {dia.strftime('%d/%m')}: Falta sa√≠da")
            
            if pendencias:
                tem_pendencias_geral = True
                mensagem = f"üö® *URGENTE {func['nome']}!*\n\n"
                mensagem += f"üìÖ *{nome_mes}/{mes_anterior_date.year}*\n\n"
                mensagem += f"‚ö†Ô∏è *√öLTIMO DIA* para regularizar!\n"
                mensagem += f"Voc√™ ainda tem *{len(pendencias)} pend√™ncia(s)*:\n\n"
                
                for pend in pendencias[:10]:
                    mensagem += f"{pend}\n"
                
                if len(pendencias) > 10:
                    mensagem += f"\n... e mais {len(pendencias) - 10}\n"
                
                mensagem += f"\nüî¥ *PRAZO: HOJE AT√â 23h59!*\n\n"
                mensagem += f"Acesse AGORA: {URL_SITE}\n"
                mensagem += f"‚Üí Clique em 'Solicitar Corre√ß√£o'"
                
                enviar_whatsapp(func['telefone'], mensagem)
                resumo_admin += f"*{func['nome']}:* {len(pendencias)} pend√™ncia(s)\n"
        
        if tem_pendencias_geral and admin and admin['telefone']:
            enviar_whatsapp(admin['telefone'], resumo_admin)

# ‚úÖ CORRE√á√ÉO 12: Dia 3 (antes era 5)
def relatorio_mensal_pagamento():
    """
    Dia 03 de cada m√™s - Envia c√°lculo de pagamento para admin.
    """
    with app.app_context():
        admin = query_db("SELECT telefone FROM users WHERE tipo = 'admin' LIMIT 1", one=True)
        if not admin or not admin['telefone']:
            return
        
        hoje = hoje_sp()
        mes_anterior_date = hoje - relativedelta(months=1)
        primeiro_dia = date(mes_anterior_date.year, mes_anterior_date.month, 1)
        ultimo_dia = date(hoje.year, hoje.month, 1) - timedelta(days=1)
        
        funcionarias = query_db("SELECT id, nome FROM users WHERE tipo = 'funcionaria'")
        
        mensagem = f"üí∞ *RELAT√ìRIO DE PAGAMENTO*\n\n"
        mensagem += f"Per√≠odo: {primeiro_dia.strftime('%d/%m/%Y')} a {ultimo_dia.strftime('%d/%m/%Y')}\n\n"
        
        for func in funcionarias:
            registros = query_db(
                "SELECT data, hora_entrada, hora_saida FROM records "
                "WHERE user_id = %s AND data >= %s AND data <= %s "
                "AND hora_entrada IS NOT NULL AND hora_saida IS NOT NULL",
                (func['id'], primeiro_dia.isoformat(), ultimo_dia.isoformat())
            )
            
            total_horas = timedelta()
            total_valor = 0
            dias_normais = 0
            dias_domingo = 0
            
            for reg in registros:
                data_reg = datetime.strptime(reg['data'], '%Y-%m-%d').date() if isinstance(reg['data'], str) else reg['data']
                entrada = datetime.strptime(reg['hora_entrada'], '%H:%M:%S').time() if isinstance(reg['hora_entrada'], str) else reg['hora_entrada']
                saida = datetime.strptime(reg['hora_saida'], '%H:%M:%S').time() if isinstance(reg['hora_saida'], str) else reg['hora_saida']
                
                horas_dia, valor_dia = calcular_valor_dia(data_reg, entrada, saida, func['nome'])
                
                if horas_dia:
                    total_horas += horas_dia
                    total_valor += valor_dia
                    
                    if data_reg.weekday() == 6:
                        dias_domingo += 1
                    else:
                        dias_normais += 1
            
            total_segundos = total_horas.total_seconds()
            horas = int(total_segundos // 3600)
            minutos = int((total_segundos % 3600) // 60)
            
            mensagem += f"*{func['nome']}:*\n"
            mensagem += f"‚è±Ô∏è Total: {horas}h{minutos:02d}m\n"
            if dias_normais > 0:
                mensagem += f"üìÖ Dias normais: {dias_normais}\n"
            if dias_domingo > 0:
                mensagem += f"‚òÄÔ∏è Domingos: {dias_domingo}\n"
            mensagem += f"üíµ *Valor: R$ {total_valor:.2f}*\n\n"
        
        mensagem += f"üìä Detalhes: {URL_SITE}"
        enviar_whatsapp(admin['telefone'], mensagem)
        print("üí∞ Relat√≥rio mensal enviado!")

# =============================================================================
# ‚úÖ BACKUP AUTOM√ÅTICO VIA TELEGRAM (GRATUITO!)
# =============================================================================
def converter_hora_banco_para_time(hora):
    """
    Converte hora do banco (timedelta, time ou string) para time object.
    Helper para usar em fun√ß√µes de relat√≥rio e backup.
    
    Args:
        hora: Pode ser timedelta, time, string ou None
    
    Returns:
        time: Objeto time ou None
    """
    if hora is None:
        return None
    
    # Se j√° √© time, retorna direto
    if isinstance(hora, time):
        return hora
    
    # Se √© timedelta (retorno do MySQL para TIME)
    if isinstance(hora, timedelta):
        total_seg = int(hora.total_seconds())
        horas = total_seg // 3600
        minutos = (total_seg % 3600) // 60
        segundos = total_seg % 60
        return time(hour=horas, minute=minutos, second=segundos)
    
    # Se √© string, converter
    if isinstance(hora, str):
        try:
            dt = datetime.strptime(hora, '%H:%M:%S')
            return dt.time()
        except:
            try:
                dt = datetime.strptime(hora, '%H:%M')
                return dt.time()
            except:
                return None
    
    return None

def backup_mensal_telegram():
    """
    Envia backup CSV via Telegram Bot.
    Executado dia 1¬∫ de cada m√™s (ap√≥s alertas de pend√™ncias).
    
    Formato CSV: data,funcionaria,entrada,saida,horas,valor
    """
    if not BACKUP_ATIVADO:
        print("‚ö†Ô∏è Backup Telegram desativado (configure TELEGRAM_BOT_TOKEN)")
        return
    
    with app.app_context():
        hoje = hoje_sp()
        mes_anterior_date = hoje - relativedelta(months=1)
        primeiro_dia = date(mes_anterior_date.year, mes_anterior_date.month, 1)
        ultimo_dia = date(hoje.year, hoje.month, 1) - timedelta(days=1)
        
        # Buscar todos os registros do m√™s anterior
        registros = query_db(
            "SELECT r.data, r.hora_entrada, r.hora_saida, u.nome "
            "FROM records r JOIN users u ON r.user_id = u.id "
            "WHERE r.data >= %s AND r.data <= %s "
            "ORDER BY u.nome, r.data",
            (primeiro_dia.isoformat(), ultimo_dia.isoformat())
        )
        
        # Gerar CSV
        import csv
        import io
        
        output = io.StringIO()
        writer = csv.writer(output)
        writer.writerow(['Data', 'Funcion√°ria', 'Entrada', 'Sa√≠da', 'Horas', 'Valor (R$)'])
        
        for reg in registros:
            data_obj = datetime.strptime(reg['data'], '%Y-%m-%d').date() if isinstance(reg['data'], str) else reg['data']
            
            if reg['hora_entrada'] and reg['hora_saida']:
                # ‚úÖ USAR FUN√á√ÉO HELPER para converter
                entrada = converter_hora_banco_para_time(reg['hora_entrada'])
                saida = converter_hora_banco_para_time(reg['hora_saida'])
                
                if entrada and saida:
                    horas_dia, valor_dia = calcular_valor_dia(data_obj, entrada, saida, reg['nome'])
                    horas_str = format_hora(horas_dia)
                else:
                    horas_str = '-'
                    valor_dia = 0
            else:
                horas_str = '-'
                valor_dia = 0
            
            writer.writerow([
                data_obj.strftime('%d/%m/%Y'),
                reg['nome'],
                format_hora(reg['hora_entrada']),
                format_hora(reg['hora_saida']),
                horas_str,
                f"{valor_dia:.2f}"
            ])
        
        csv_content = output.getvalue()
        output.close()
        
        # Salvar temporariamente
        filename = f"backup_{mes_anterior_date.strftime('%Y_%m')}.csv"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(csv_content)
        
        # Enviar via Telegram
        try:
            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendDocument"
            with open(filename, 'rb') as f:
                response = requests.post(
                    url,
                    data={'chat_id': TELEGRAM_CHAT_ID},
                    files={'document': f}
                )
            
            if response.status_code == 200:
                print(f"‚úÖ Backup enviado via Telegram: {filename}")
            else:
                print(f"‚ùå Erro ao enviar backup: {response.text}")
        
        except Exception as e:
            print(f"‚ùå Erro ao enviar backup: {e}")
        
        finally:
            # Remover arquivo tempor√°rio
            import os
            if os.path.exists(filename):
                os.remove(filename)

def relatorio_falhas_whatsapp():
    """
    Envia relat√≥rio di√°rio de falhas para admin (23h50).
    """
    global falhas_whatsapp_hoje
    
    if not falhas_whatsapp_hoje:
        return
    
    with app.app_context():
        admin = query_db("SELECT telefone FROM users WHERE tipo = 'admin' LIMIT 1", one=True)
        
        if admin and admin['telefone']:
            mensagem = f"‚ö†Ô∏è *RELAT√ìRIO DE FALHAS WHATSAPP*\n\n"
            mensagem += f"Total hoje: {len(falhas_whatsapp_hoje)} falhas\n\n"
            
            for falha in falhas_whatsapp_hoje[:5]:
                mensagem += f"‚Ä¢ {falha['telefone']}: {falha['erro'][:40]}...\n"
            
            if len(falhas_whatsapp_hoje) > 5:
                mensagem += f"\n... e mais {len(falhas_whatsapp_hoje) - 5} falhas\n"
            
            mensagem += f"\nüìÅ Veja logs/whatsapp_falhas.log para detalhes"
            enviar_whatsapp(admin['telefone'], mensagem)
    
    falhas_whatsapp_hoje = []

@app.errorhandler(500)
def erro_interno(e):
    """Envia erro cr√≠tico via Telegram"""
    erro_msg = f"üö® ERRO CR√çTICO NO SISTEMA\n\n{str(e)}\n\n{traceback.format_exc()}"
    
    # Envia para admin via Telegram (se configurado)
    if TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID:
        try:
            requests.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
                json={'chat_id': TELEGRAM_CHAT_ID, 'text': erro_msg[:4000]}
            )
        except:
            pass
    
    return "Erro interno", 500

# =============================================================================
# ROTAS PARA CRON EXTERNO (Cron-job.org)
# =============================================================================

@app.route('/cron/lembrete-entrada')
def cron_lembrete_entrada():
    """Chamado por cron externo √†s 8h"""
    try:
        lembrete_entrada()
        return "‚úÖ Lembrete entrada enviado", 200
    except Exception as e:
        return f"Erro: {str(e)}", 500

@app.route('/cron/lembrete-saida')
def cron_lembrete_saida():
    """Chamado por cron externo nos hor√°rios de sa√≠da"""
    try:
        lembrete_saida()
        return "‚úÖ Lembrete sa√≠da enviado", 200
    except Exception as e:
        return f"Erro: {str(e)}", 500

@app.route('/cron/alerta-dia-01')
def cron_alerta_dia_01():
    """Chamado dia 1 do m√™s √†s 9h"""
    try:
        alerta_pendencias_dia_01()
        return "‚úÖ Alerta dia 01 enviado", 200
    except Exception as e:
        return f"Erro: {str(e)}", 500

@app.route('/cron/alerta-dia-02')
def cron_alerta_dia_02():
    """Chamado dia 2 do m√™s √†s 9h e 18h"""
    try:
        alerta_pendencias_dia_02()
        return "‚úÖ Alerta dia 02 enviado", 200
    except Exception as e:
        return f"Erro: {str(e)}", 500

@app.route('/cron/relatorio-mensal')
def cron_relatorio_mensal():
    """Chamado dia 3 do m√™s √†s 9h"""
    try:
        relatorio_mensal_pagamento()
        return "‚úÖ Relat√≥rio mensal enviado", 200
    except Exception as e:
        return f"Erro: {str(e)}", 500

@app.route('/cron/backup-telegram')
def cron_backup_telegram():
    """Chamado dia 1 do m√™s √†s 19h"""
    try:
        backup_mensal_telegram()
        return "‚úÖ Backup enviado", 200
    except Exception as e:
        return f"Erro: {str(e)}", 500

@app.route('/cron/relatorio-falhas')
def cron_relatorio_falhas():
    """Chamado diariamente √†s 23h50"""
    try:
        relatorio_falhas_whatsapp()
        return "‚úÖ Relat√≥rio falhas enviado", 200
    except Exception as e:
        return f"Erro: {str(e)}", 500

print("‚úÖ Rotas CRON configuradas!")

# =============================================================================
# INICIALIZA√á√ÉO DO FLASK
# =============================================================================

if __name__ == '__main__':
    with app.app_context():
        init_db()
    
    # ‚úÖ Debug mode do .env
    debug_mode = os.getenv('FLASK_DEBUG', 'False').lower() == 'true'
    
    print("\n" + "="*70)
    print("üéâ SISTEMA DE PONTO INICIADO COM SUCESSO!")
    print("="*70)
    print(f"üìÖ Data/Hora: {agora_sp().strftime('%d/%m/%Y %H:%M:%S')}")
    print(f"üåç Timezone: America/Sao_Paulo")
    print(f"üíæ Reten√ß√£o de dados: 13 meses (395 dias)")
    print(f"üì± WhatsApp: {'‚úÖ Configurado' if any(CALLMEBOT_KEYS.values()) else '‚ùå N√£o configurado'}")
    print(f"ü§ñ Telegram Backup: {'‚úÖ Ativado' if BACKUP_ATIVADO else '‚ö†Ô∏è Desativado'}")
    print(f"üîê Debug Mode: {'‚ö†Ô∏è Ativado' if debug_mode else '‚úÖ Desativado'}")
    print("="*70 + "\n")
    
    app.run(debug=debug_mode)